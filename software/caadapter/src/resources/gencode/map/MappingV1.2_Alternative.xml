<?xml version="1.0"?>

<!--L
  Copyright SAIC.

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/caadapter/LICENSE.txt for details.
L-->

<!--
    ** BEGIN OLD 1.1 NOTES - They may or may not be relevent anymore **
    Rule 1: Every clonename for the HL7 RMIM should exist. If not, this clonename related info will be ignored
    even next level clonename exited. Otherwise, RimGraphBuilder can not manage the recursive relationship??.

    Rule 2: Most of the time, datatype's field name is matched with data type xml schema's attribute name.
    If the data is existed in the xml text node, use field name "inlineText" instead.

    Rule 3: subClass
         if RMIM RIM class attribute data type is abstract, such as ANY, it should add the attribute subClass="PQ"
         at the datatype element in the mapping file.

    Rule 4: IVL
        highClosed
        lowClosed
    ** END OLD 1.1 NOTES **

-->

<!--
    Consider add UUID field at CSVFieldMeta interface, which can be referenced by Mapping file, which will resolve the
    synchronization problem if mapping is 80% done and user goes back to change the CSV meta file.
-->

<mapping version="1.2">
    <components>
        <!-- A component is an instance of a particular data. -->
        <component uuid="1111" type="source" kind="scm" location="csvspecification.scm"/>
            <!-- when type="scm" the location attribute contains a reference to a file -->

        <component uuid="2222" type="source" kind="scm" location="csvspecification2.scm"/>

			<!-- is this needed? we're making a special case of HL7 data that
			we have our own structure for in the "hl7meta" tag. -->
            <!-- when type="HL7v3" the value attribute contains a messagetypeid -->
        <component uuid="3333" type="target" kind="HL7v3" location="NCIC_MT99999.h3s"/>

<!-- 
Following are function definitions that are used within this mapping file.
Those definitions could be moved to a separate file for better clarity.

The difference between this and existing definition is that this defines the function, while the existing XML definition 
presents the instances of those functions for each occurrence of these functions in mapping.
-->
        <!-- 
        A function component is an algorithm between two (or more) pieces of data. 
        -->
        <component uuid="4444" type="function" kind="concat">
<!--            <function value="concat">-->
                <inputs>
                    <datapoint pos="0" name="string1" datatype="string" uuid="ABCDEF44444444"/>
                    <datapoint pos="1" datatype="string" uuid="ABCDEF55555555"/>
                </inputs>
                <outputs>
                    <datapoint pos="0" datatype="string" uuid="ABCDEF6666666"/>
                </outputs>
<!--            </function>-->
        </component>

        <component uuid="5555" type="function" kind="split">
<!--            <function value="concat" >-->
                <inputs>
                    <datapoint pos="0" name="string1" datatype="string" uuid="123456789"/>
                </inputs>
                <outputs>
                    <datapoint pos="0" name="result" datatype="string" uuid="5647382910"/>
                    <datapoint pos="1" name="string2" datatype="string" uuid="987654321"/>
                </outputs>
<!--            </function>-->
        </component>

    </components>

    <maps>

        <!-- Direct Map -->
        <map uuid="map01">
            <inputs>
            	<datapoint pos="0" component-uuid="1111" data-uuid="AAAAAAAAAAAAAAAAAAA"/>
            </inputs>
            <outputs>
	            <datapoint pos="0" component-uuid="3333" data-uuid="1111111128"/>
            </outputs>
        </map>

        <!-- Direct Map -->        
        <map uuid="map02">
            <inputs>
            	<datapoint pos="0" component-uuid="1111" data-uuid="BBBBBBBBBBBBBBBBBBB"/>
            </inputs>
            <outputs>
	            <datapoint pos="0" component-uuid="3333" data-uuid="1111111133"/>
            </outputs>
        </map>

        <!-- Mapping using Function concat -->
		<!-- a complete mapping example -->
        <map uuid="map03" function_refid="4444">
            <inputs>
            	<datapoint pos="0" component-uuid="1111" data-uuid="1111ABCDEFGH"/>
	            <datapoint pos="1" component-uuid="1111" data-uuid="1111ABCDEFGHI"/>
            </inputs>
            <outputs>
	            <datapoint pos="0" component-uuid="3333" data-uuid="1234567890"/>
            </outputs>
        </map>
		<!-- an incomplete mapping example -->
        <map uuid="map033" function_refid="4444">
            <inputs>
            	<datapoint pos="0" component-uuid="1111" data-uuid="1111ABCDEFGH123"/>
<!--	            <datapoint pos="1" component-uuid="1111" data-uuid="1111ABCDEFGHI1234"/>  -->
            </inputs>
            <outputs>
	            <datapoint pos="0" component-uuid="3333" data-uuid="12345678901234"/>
            </outputs>
        </map>

        <!-- Mapping using Function split -->
        <map uuid="map03" function_refid="5555">
            <inputs>
            	<datapoint pos="0" component-uuid="1111" data-uuid="1111ABCDEFGHIK"/>
            </inputs>
            <outputs>
	            <datapoint pos="0" component-uuid="3333" data-uuid="12345678901"/>
	            <datapoint pos="1" component-uuid="3333" data-uuid="12345678902"/>
            </outputs>
        </map>

    </maps>
    <views>
    	<view map_refid="map01">
    		<display visible="true" highlight="true" color="blue"/>
	    	<input_point id="1" x="123" y="123"/>
	    	<output_point id="1" x="123" y="323"/>
    	</view>
    	<view map_refid="map03">
    		<display_attribute visible="true" highlight="true" color="blue"/>
    		<display_bound x="12" y="4" width="12" height="123"/>
	    	<input_point id="1" x="123" y="123"/>
	    	<input_point id="2" x="223" y="123"/>
	    	<output_point id="1" x="123" y="323"/>
    	</view>
    </views>
</mapping>