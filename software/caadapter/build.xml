<?xml version="1.0"?>
<project name="caAdapter" default="build:dist.bin">
    <description>
        **************************************************************************
        caAdapter ANT BUILD SCRIPT
        **************************************************************************
    </description>
    <!-- To enable notification of the email use 
    	"ant -logger org.apache.tools.ant.listener.MailLogger" or "run.bat"
    	-->
    <!-- Define project properties !-->
    <property file="./build.properties"/>
    <property name="caadapter.project.lib.dir" value="./lib"/>
    <property name="caadapter.project.ref.lib.dir" value="./referenceLib"/>
    <property name="caadapter.project.src.dir" value="./src/java"/>
    <property name="caadapter.project.resources.dir" value="./src/resources"/>
    
    <property name="sqleonardo.jar" value="${basedir}/lib/sqleonardo.jar"/>
	<property name="ref_sqleonardo.jar" value="${caadapter.project.ref.lib.dir}/sqleonardo.jar"/>
	
    <property name="build.dir" value="${basedir}/build"/>
    <property name="dist.dir" value="${basedir}/dist"/>

	<property name="reference.dir" value ="${basedir}/referenceLib"/>
    <property name="config.dir" value="${basedir}/conf"/>
    <property name="docs.dir" value="${basedir}/docs"/>

    <property name="webserver" value="http://localhost:8080"/>

    <!-- Mailer properties begin-->
    <property name="MailLogger.from" value="caAdapter.build.notifier"/>
    <property name="MailLogger.failure.to" value="wangeug@mail.nih.gov"/>
    <property name="MailLogger.mailhost" value="mailfwd.nih.gov"/>
    <property name="MailLogger.success.to" value="wangeug@mail.nih.gov"/>
    <property name="MailLogger.success.subject" value="Build successful"/>
    <property name="MailLogger.failure.subject" value="Build failed"/>
    <property name="MailLogger.success.notify" value="on"/>
	
	<path id="project.class.path">
		<fileset dir="${caadapter.project.lib.dir}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${caadapter.project.ref.lib.dir}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
			<exclude name="caAdapter.jar"/>
		</fileset>
	</path>

	<target name="build:caadapter-api" depends="init">
		<echo message="build:caadapter-api is called :dist.dir =${dist.dir}"/>
		<antcall target="build:dist.src"/>
   	</target>

   	<property name="caadapter.project.webstart.home" value="src/web/webstart"/>
   	<property name="caadapter.project.webstart.conf" value="src/web/webstartconf"/>
	<target name="build:caadapter-webstart" depends="webstart:repack, webstart:copy_resources" >	
		<antcall target="webstart:sign_resources">
			<param name="RESOURCE_HOME" value="${dist.dir}/webstart"/>
		</antcall>

		<echo message=""/>
		<echo message="-------- creating ${webstart.warfile.name} file (copied to deploy/webstart) --------"/>
		<war destfile="${dist.dir}/${webstart.warfile.name}" webxml="${caadapter.project.webstart.home}/web.xml">
			<fileset dir="${dist.dir}/webstart">
				<exclude name="myKeyStore"/>
			</fileset>
			<!-- zipfileset dir="${caadapter.project.webstart.home}/jsp" prefix="jsp"/ -->
			<lib dir="${caadapter.project.webstart.home}/WEB-INF/lib">
				<include name="jardiff.jar"/>
				<include name="jnlp.jar"/>
				<include name="jnlp-servlet.jar"/>
			</lib>
			<zipfileset src="${project.docs.home}/${proejct.online.help}" prefix="help"/>
		</war>
		<delete dir="${dist.dir}/webstart" failonerror="false"/>
	</target>

   	<target name="webstart:repack" depends="build:dist.bin" description="Re-pack caAdapter.jar for web start deployment">
   		<echo message="build:webstart is called :dist.dir =${dist.dir}"/>
   		<echo message="build:webstart -- re-pack caAdapter.jar "/>
   		<property name="caadapter.project.webstart.build.home" value="${dist.dir}/webstart"/>
		<unzip dest="${caadapter.project.webstart.build.home}/tmp">
			<fileset dir="${caadapter.project.ref.lib.dir}">
				<include name="caAdapter.jar"/>
			</fileset>
		</unzip>
		<copy file="${caadapter.project.webstart.conf}/${webstart.properties.file}" tofile="${caadapter.project.webstart.build.home}/tmp/caadapter-components.properties"/>
		<zip destfile="${caadapter.project.webstart.build.home}/caAdapter.jar">
			<fileset dir="${caadapter.project.webstart.build.home}/tmp"/>
		</zip>
		<delete dir="${caadapter.project.webstart.build.home}/tmp"/>
   	</target>
   	
	<target name="webstart:copy_resources" description="Perpare web start resources...">  
		<echo message="build:webstart --copy resource"/>
		<copy todir="${dist.dir}/webstart" failonerror="false">
			<fileset dir="${caadapter.project.lib.dir}">
				<include name="BrowserLauncher2-all-10rc4.jar"/>
				<include name="castor-0.9.9.jar"/>
				<include name="cmps.jar"/> 
				<include name="commons-collections-3.2.jar"/>
				<include name="commons-logging-1.0.4.jar"/>
				<include name="dom4j-1.4.jar"/>
				<include name="jaxen-jdom.jar"/>
				<include name="jdom.jar"/>
				<include name="knuHL7V2tree.jar"/>
				<include name="log4j-1.2.8.jar"/>
				<include name="sdk-codegen.jar"/>
				<include name="spring.jar"/>
				<include name="xmi.in.out.jar"/>
				<include name="xml-apis.jar"/>
				<include name="xercesImpl.jar"/>
			</fileset>
			<fileset dir="${caadapter.project.ref.lib.dir}">
				<include name="jgraph.jar"/>
				<include name="caAdapter_ui.jar"/>
			</fileset>
		</copy>

		<copy file="${caadapter.project.webstart.home}/${webstart.launch.page.file}" todir="${dist.dir}/webstart" />
		<copy file="${caadapter.project.webstart.home}/${webstart.index.page.file}/" tofile="${dist.dir}/webstart/index.html" />
		
        <echo message="-------- Applying Webserver replacement --------"/>
        <!-- replace file="${dist.dir}/webstart/${webstart.launch.page.file}" token="$WEBSERVER" value="${webserver}"/ -->
	</target>
	
	<target name="webstart:sign_resources">
    	<available file="${jar-signing.keystore.abs-location}" property="digital-keys.exist"/>

	    <antcall target="generate-keys"/>
	    <echo message="digitally signing...${RESOURCE_HOME}"/>

	    <echo message="Key Store: ${jar-signing.keystore.abs-location}"/>
	    <echo message="-------- Signing all jar files --------"/>
	    <signjar alias="${jar-signing.keystore.alias}" storepass="${jar-signing.keystore.password}" keystore="${jar-signing.keystore.abs-location}" lazy="false">
		   	<fileset dir="${RESOURCE_HOME}" includes="*.jar, *.zip"/>
	    </signjar>
	</target>
	
   	<property name="demo.build.working.dir" value="${dist.dir}/tempdir"/>
    <target name="build:dist.bin" depends="compile">
		<tstamp>
			<format property="DIST_DATE" pattern="MM-dd-yy" locale="en_us"/>
		</tstamp>
		<property name="BINARY_DIST_FILE" value="${project.name}${caadapter-webapp.version}_Bin_${DIST_DATE}.zip"/>
		<antcall target="build:demo.ui.prepare"/>
		
		<echo message="${demo.build.working.dir} ... create ${BINARY_DIST_FILE}"/>
		
		<ant dir="${demo.build.working.dir}" inheritAll="false" target="demo.ui.jar">
			<property name="BINARY_DIST_FILE" value="${BINARY_DIST_FILE}"/>
		</ant>
		
		<copy tofile="${caadapter.project.ref.lib.dir}/caAdapter_ui.jar">
			<fileset file="${demo.build.working.dir}/caAdapter_ui.jar" />
		</copy>
		
		<zip destfile="${dist.dir}/${BINARY_DIST_FILE}">
			<zipfileset dir="${demo.build.working.dir}"/>
 			<zipfileset dir="workingspace/Object_to_DB_Example" prefix="workingspace/sampleModels"/>
		</zip>
		<delete dir="${demo.build.working.dir}" failonerror="false" />
    </target>
    
	<target name="build:demo.ui.prepare">
		<echo message="build demo_ui.jar...."/>
		<mkdir dir="${demo.build.working.dir}"/>
		
		<copy tofile="${demo.build.working.dir}/build.xml" flatten="true">
			<fileset file="build_demo.xml"/>
		</copy>
		<copy todir="${demo.build.working.dir}" flatten="true">
			<fileset file="run.bat"/> 
			<fileset file="build.properties"/> 
		</copy>
		<copy todir="${demo.build.working.dir}/src/demo">
			<fileset dir="src/demo/"/> 
		</copy>
		<mkdir dir="${demo.build.working.dir}/conf"/>
		<copy todir="${demo.build.working.dir}/conf">
			<fileset file="${config.dir}/caadapter-components.properties" />
			<fileset file="${config.dir}/logging.properties" />
			<fileset file="${config.dir}/caadapter-resources.properties" />
			<fileset file="${config.dir}/datatype-core-attributes-default.xml" />
			<fileset file="${config.dir}/datatype-core-attributes-setting.xml" />
			<fileset file="${config.dir}/hl7-normative-setting.xml" />
			<fileset file="${config.dir}/hl7-customer-datatype-setting.xml"/>	
		</copy>
		<mkdir dir="${demo.build.working.dir}/lib"/>
		<copy todir="${demo.build.working.dir}/lib">
			<fileset dir="${caadapter.project.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.zip"/>
			</fileset>
			<fileset dir="${caadapter.project.ref.lib.dir}">
				<include name="**/*.jar"/>
				<include name="**/*.zip"/>
			</fileset>
		</copy>
		<mkdir dir="${demo.build.working.dir}/hl7_home"/>   	 
		<delete file="${lib.dir}\sqleonardo.jar"/>
		<delete dir="${lib.dir}\delete.jar"/>
	</target>
    
	<target name="build:dist.src" depends="init" description="build the source distribution">
		<tstamp>
	            <format property="DIST_DATE" pattern="MM-dd-yy" locale="en_us"/>
        </tstamp>
        <property name="SOURCE_DIST_FILE" value="${project.name}${caadapter-webapp.version}_Src_${DIST_DATE}.zip"/>
		<echo message="create ${SOURCE_DIST_FILE}"/>
		<delete>
			<fileset dir="${dist.dir}" includes="*.zip"/>
		</delete>

		<condition property="caadapter.module.all.zip">	
				<equals arg1="${caadapter.release.all.modules}" arg2="true"/>
		</condition>

		<condition property="caadapter.module.hl7.zip">	
				<equals arg1="${caadapter.release.hl7.only}" arg2="true"/>
		</condition>
		<condition property="caadapter.module.gme.zip">	
				<equals arg1="${caadapter.release.mms.gme.only}" arg2="true"/>
		</condition>
		<condition property="caadapter.module.mms.zip">	
				<equals arg1="${caadapter.release.mms.only}" arg2="true"/>
		</condition>
		<!-- conditionally zip the distributed zip file -->
		<echo message="Build source distribution for ALL module..."/>
		<zip destfile="${dist.dir}/${SOURCE_DIST_FILE}" basedir="." 
			excludes="referenceLIB/**.*, lib/mysql*.jar,lib/ojdbc*.jar, **/*.class, **/build/**, **/dist/**, **/gencode/**">
		</zip>
	</target>
    
	<target name="compile" depends="gencode" description="compile the source">
		<javac destdir="${build.dir}" target="${project.build.target.version}"
				classpathref="project.class.path"
				fork="yes" debug="on">
			<src path="${caadapter.project.src.dir}"/>
			<src path="${caadapter.project.gencode.dir}"/>
			<exclude name="test/**"/>
		</javac>

		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${dist.dir}" includes="**/*"/>
		</delete>

		<jar destfile="${caadapter.project.ref.lib.dir}/caAdapter.jar">
		     <fileset dir="${build.dir}"/>
		     <fileset dir="${caadapter.project.resources.dir}" includes="images/*"/> 
		     <fileset dir="src/resources/etc">
				<include name="*Notes.txt"/>
				<include name="warning/**"/>
				<include name="license/**"/>
			</fileset>
			<fileset dir="${project.docs.home}">
				<include name="*Notes.txt"/>
			</fileset>
		     <fileset dir="${config.dir}" excludes="caadapter-components.properties, logging.properties"/>
        </jar>
        <delete dir="${build.dir}" failonerror="false"/>
        <delete dir="${caadapter.project.gencode.dir}" failonerror="false"/>
	</target>
	
	
	<!-- Define genCode parameters !-->
	<property name="caadapter.project.gencode.dir" value="gencode"/>
	<property name="caadapter.project.gencode.common.dir" value="src/resources/gencode/common"/>
	<property name="caadapter.project.gencode.map.dir" value="src/resources/gencode/map"/>
	<property name="gencode.out.file" value="gencode.out"/>

	<path id="castor.gencode.path">
		<pathelement location="${caadapter.project.lib.dir}/castor-0.9.9.jar"/>
		<pathelement location="${caadapter.project.lib.dir}/commons-logging-1.0.4.jar"/>
		<pathelement location="${caadapter.project.lib.dir}/xercesImpl.jar"/>
	</path>

	<path id="saxon8.gencode.path">
		<pathelement location="${caadapter.project.lib.dir}/saxon8.jar"/>
	</path>
	
	<target name="gencode" depends="init"  >
		<echo message="Call generating common CODE ..."/>
		<antcall target="gencode.common.code"/>

		<echo message="Call generating castor CODE ..."  />
		<antcall target="gencode.castor.code"/>
	</target>
	
	<target name="gencode.castor.code" description="create castor code">
		<!-- define castor code generation properties -->
		<property name="castor_binding_file" value="${caadapter.project.gencode.common.dir}/castorbinding.xml"/>
		
		<echo message="** Generate castor csv objects"/>
		<java fork="yes" 
				classname="org.exolab.castor.builder.SourceGenerator"
				failonerror="true"
				classpathref="castor.gencode.path">
			<arg line="-f 
				-i ${caadapter.project.gencode.map.dir}/csv/csvspecification.xsd 
				-dest ${caadapter.project.gencode.dir} 
				-package gov.nih.nci.caadapter.castor.csv.meta.impl 
				-binding-file ${castor_binding_file} 
				-verbose"/>
		</java>

		<echo message="** Generate castor FUNCTION bjects"/>
		<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator"
				failonerror="true"
				classpathref="castor.gencode.path">
			<arg line="-f 
				-i ${caadapter.project.gencode.map.dir}/functions/functionspecification.xsd 
				-dest ${caadapter.project.gencode.dir} 
				-package gov.nih.nci.caadapter.castor.function.impl 
				-binding-file ${castor_binding_file} 
				-verbose"/>
		</java>

		<echo message="** Generate castor mapping objects"/>
		<java fork="yes" classname="org.exolab.castor.builder.SourceGenerator"
				failonerror="true"
				classpathref="castor.gencode.path">
			<arg line="-f 
				-i ${caadapter.project.gencode.map.dir}/MappingV4.0.xsd
				-dest ${caadapter.project.gencode.dir} 
				-package gov.nih.nci.caadapter.castor.map.impl
				-binding-file ${castor_binding_file} 
				-verbose"/>
		</java>
	</target>

	<target name="gencode.common.code" description="create common XML_TO_JAVA file code">
		<echo message="Generating config file"/>
		<java fork="yes" classname="net.sf.saxon.Transform" 
				taskname="saxon.gencode.config" 
				failonerror="true"
				classpathref="saxon8.gencode.path">
			<arg value="-o"/>
			<arg value="${gencode.out.file}"/>
			<arg value="${caadapter.project.gencode.common.dir}/config-dev.xml"/>
			<arg value="${caadapter.project.gencode.common.dir}/config2java.xsl"/>
			<arg value="base-path=${caadapter.project.gencode.dir}"/>
		</java>

		<echo message="Generating message file"/>
		<java fork="yes" classname="net.sf.saxon.Transform" 
				taskname="saxon.gencode.message" 
				failonerror="true"
				classpathref="saxon8.gencode.path">
			<arg value="-o"/>
			<arg value="${gencode.out.file}"/>
			<arg value="${caadapter.project.gencode.common.dir}/messages.xml"/>
			<arg value="${caadapter.project.gencode.common.dir}/messages2java.xsl"/>
			<arg value="base-path=${caadapter.project.gencode.dir}"/>
		</java>
	</target>
	
    
    <target name="copy.built.ws.module" if="caadapter.release.ws.build">
    	<ant antfile="${ws.module.build}"/>
    	<echo message="copy ws...."/>
    	<copy todir="${dist.dir}">
			<fileset dir="${ws.module.home}/dist">
				<include name="**/caAdapterWS.war"/>
			</fileset>
        </copy>
        <echo message="deploy ws....:{j2ee.server.deploy.dir}"/>
    	<copy todir="${j2ee.server.deploy.dir}">
    		<fileset dir="${ws.module.home}/dist">
    			<include name="**/caAdapterWS.war"/>
    		</fileset>
    	</copy>
    </target>
    	
   
   <property name="j2ee.server.deploy.dir" value="C:\devWeb\jboss-5.0.1.GA\server\default\deploy"/>
	
    <target name="hl7webstart" if="caadapter.release.hl7.build">
        <echo message="------- cleaning webstart deploy directory ------"/>
        <delete dir="${hl7.webstart.deploy.dir}"/>
        <delete file="${dist.dir}/${hl7.webstart.warfile.name}"/>
        <!--delete file="${lib.dir}/${project.jar.name}"/-->
		<mkdir dir="${hl7.webstart.deploy.dir}/tmp"/>
		<unzip dest="${hl7.webstart.deploy.dir}/tmp">
        	<fileset dir="${dist.dir}/lib">
            	<include name="caAdapter.jar"/>
        	</fileset>
		</unzip>

    	<copy file="${webstart.config.dir}/caadapter-components.hl7.properties" tofile="${hl7.webstart.deploy.dir}/tmp/caadapter-components.properties"/>
    	<copy todir="${hl7.webstart.deploy.dir}/tmp/conf"> 
    		<fileset dir="${config.dir}">
		        <include name="datatype-core-attributes-default.xml"/>
				<include name="datatype-core-attributes-setting.xml"/>
    			<include name="hl7-normative-setting.xml"/>
   				<include name="hl7-customer-datatype-setting.xml"/>
    		</fileset>
		</copy>
    	<echo message="copy V2MessageIndex" />
		<copy todir="${hl7.webstart.deploy.dir}/tmp">
			<fileset dir="${webstart.home.files}">
				<include name="v2MessageIndex.obj"/>
        	</fileset>
			<fileset dir="${basedir}/etc/map">
			    <include name="V2_to_V3.vom"/>
			</fileset>
		</copy>
		
		<zip destfile="${hl7.webstart.deploy.dir}/caAdapter.jar">
			<fileset dir="${hl7.webstart.deploy.dir}/tmp"/>
		</zip>

        <delete dir="${hl7.webstart.deploy.dir}/tmp"/>
    	
        <echo message=""/>
        <echo message="------- copying jar files to webstart deploy directory ------"/>
        <copy todir="${hl7.webstart.deploy.dir}">
            <fileset dir="${lib.dir}">
            	<include name="commons-collections-3.2.jar"/>
				<include name="commons-logging-1.0.4.jar"/>
				<include name="xml-apis.jar"/>
				<include name="xercesImpl.jar"/>
				<include name="jdom.jar"/>
                <include name="castor-0.9.9.jar"/>
            	<include name="knuHL7V2tree.jar"/>
               	<include name="poi-2.5.1-final-20040804.jar"/>
               	<include name="jaxb-api.jar"/>
               	<include name="jsr173_1.0_api.jar"/>
               	<include name="cmps.jar"/>
        	</fileset>
        	<fileset dir="${hl7.module.home}/lib">
        		 <include name="HL7v2xsd.zip"/>
			     <include name="encoderframework.jar"/>
			     <include name="encoderfrmwk-xsdextension.jar"/>
			     <include name="hl7.jar"/>
			     <include name="hl7encoder-xsdextension.jar"/>
			     <include name="xbean.jar"/>      
        	</fileset>
        	<fileset dir="${reference.dir}">
                <include name="jgraph.jar"/>      
        	</fileset>
        	<fileset dir="${ui.module.home}/lib">
        		<include name="BrowserLauncher2-all-10rc4.jar"/>   
        	</fileset>
        	<fileset dir="${common.module.home}/lib">
                <include name="log4j-1.2.8.jar"/>
        	</fileset>
        </copy>
		<antcall target="hl7.spec.process"/>
        
        <echo message=""/>
        <echo message="------ copying webstart files to webstart deploy directory ------"/>
        <copy todir="${hl7.webstart.deploy.dir}" includeEmptyDirs="No">
		   	<fileset dir="${webstart.home.files}">
		      	<include name="caadapter-hl7.jnlp"/>
				<include name="index-hl7.html"/>
		     </fileset>
        </copy>

        <echo message="set webserver as $WEBSERVER, index.html..."/>
        <echo message="-------- Applying Webserver replacement --------"/>
        <replace file="${hl7.webstart.deploy.dir}/caadapter-hl7.jnlp" token="$WEBSERVER" value="${webserver}"/>
        <move file="${hl7.webstart.deploy.dir}/index-hl7.html" tofile="${hl7.webstart.deploy.dir}/index.html" />

        <antcall target="generate-keys"/>

    	<echo message=""/>
        <echo message="-------- Signing all jar files --------"/>
        <signjar alias="${signjar.alias}" storepass="${signjar.storepass}" keystore="${signjar.keystore}" lazy="false">
            <fileset dir="${hl7.webstart.deploy.dir}" includes="*.jar, *.zip"/>
        </signjar>

        <echo message=""/>
        <echo message="-------- creating ${hl7.webstart.warfile.name} file (copied to deploy/webstart) --------"/>
        <war destfile="${dist.dir}/${hl7.webstart.warfile.name}" webxml="${webstart.home.files}/web.xml">
            <fileset dir="${hl7.webstart.deploy.dir}">
                <exclude name="myKeyStore"/>
            </fileset>
			<zipfileset src="./docs/help_4.3.zip" prefix="help"/>
        </war>

        <echo message=""/>
        <echo message="-------- Auto-Deploying to Apache **disabled--------"/>
        <copy file="${dist.dir}/${hl7.webstart.warfile.name}" tofile="${j2ee.server.deploy.dir}/${hl7.webstart.warfile.name}"/>
    </target>
	
		<target name="build.hl7.specification">
			<mkdir dir="${hl7.webstart.deploy.dir}/tmp/hl7spec/hl7_home/"/>
			<unzip dest="${hl7.webstart.deploy.dir}/tmp/hl7spec/hl7_home/${normative.year}">
			     <fileset dir="${basedir}/hl7_home/${normative.year}" >
			         <include name="${hl7.mif.file}"/>
			         <include name="${hl7.datatype.file}"/>
			      </fileset>
			</unzip>
			<copy file="${basedir}/hl7_home/${normative.year}/mifIndex.obj" 
				tofile="${hl7.webstart.deploy.dir}/tmp/hl7spec/hl7_home/${normative.year}/mifIndex.obj"/>
		</target>
		
		<target name="hl7.spec.process">
			<antcall target="build.hl7.specification">
				<param name="param1" value="value"/>
			  	<param name="normative.year" value="Normative_2008"/>
			  	<param name="hl7.mif.file" value="mif_2008.zip"/>
			  	<param name="hl7.datatype.file" value="schemas.zip"/>
			 </antcall>
	 
	  		<antcall target="build.hl7.specification">
						<param name="param1" value="value"/>
					  	<param name="normative.year" value="Normative_2006"/>
					  	<param name="hl7.mif.file" value="mif_2006.zip"/>
					  	<param name="hl7.datatype.file" value="schemas.zip"/>
			</antcall>
			<antcall target="build.hl7.specification">
						<param name="param1" value="value"/>
					  	<param name="normative.year" value="Normative_2005"/>
					  	<param name="hl7.mif.file" value="mif_2005.zip"/>
					  	<param name="hl7.datatype.file" value="schemas.zip"/>
			 </antcall>
	 
		     <zip destfile="${hl7.webstart.deploy.dir}/hl7Specfication.zip">
				<fileset dir="${hl7.webstart.deploy.dir}/tmp/hl7spec"/>
			</zip>
			<delete dir="${hl7.webstart.deploy.dir}/tmp"/>
	</target>
	
	<target name="copyDownload" if="sql.downloaded">
        <copy tofile="${basedir}/lib/sqleonardo.jar">
            <fileset file="${basedir}/lib/deletethisfolder.jar/sqleonardo-2007.06.rc1/**.jar"/>
        </copy>
        <delete dir="${basedir}/lib/deletethisfolder.jar"/>
	</target>
	

    <target name="init" depends="clean">
        <echo message="-------- initialize ${project.name}  --------"/>
        <tstamp>
            <format property="DATE" pattern="MM-dd-yy" locale="en_us"/>
        </tstamp>

        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
    	<condition property="ref.sqleonardo">
		   <available file="${ref_sqleonardo.jar}"/>
		</condition>
    	
		 <condition property="caadapter.release.ws.build">	
				<equals arg1="${caadapter.release.ws.include}" arg2="true"/>
		</condition>
		<antcall target="copyRef"></antcall>
		
		<!-- if only release MMS module, copy the CaadapterUtil from MMS module -->
		<condition property="caadapter.release.mms.build">	
			<equals arg1="${caadapter.release.mms.only}" arg2="true"/>
		</condition>
		<!-- antcall target="copyMMSCaadapterUtil"/ -->
		
		<!-- if only release GME module, copy the GME_CaadapterUtil from MMS module -->
			<condition property="caadapter.release.mms.gme.build">	
					<equals arg1="${caadapter.release.mms.gme.only}" arg2="true"/>
			</condition>
		<antcall target="copyGMECaadapterUtil"/>
		
		<!-- if only release HL7 module, copy the CaadapterUtil from HL& module -->
		<condition property="caadapter.release.hl7.build">	
			<equals arg1="${caadapter.release.hl7.only}" arg2="true"/>
		</condition>
		<!-- antcall target="copyHL7CaadapterUtil"/ -->
		
		
    	<condition property="download.sqleonardo">
		   <available file="${sqleonardo.jar}"/>
		</condition>
    </target>
    <target name="clean.ws.option" if="caadapter.release.ws.build">
    	<ant antfile="${ws.module.build}" target="init"/>
    </target>
    
	<target name="copyMMSCaadapterUtil" if="caadapter.release.mms.build">
		<echo message="caadapter.release.mms.only=${caadapter.release.mms.only}"/>
		<copy toDir="${common.module.home}/src"
				overwrite="true">
			<fileset dir="${mms.module.home}/src" includes="**/CaadapterUtil.java"/>
		</copy>
	</target>
	<target name="copyGMECaadapterUtil" if="caadapter.release.mms.gme.build">
			<echo message="caadapter.release.mms.gme.only=${caadapter.release.mms.gme.only}"/>
			<copy tofile="${common.module.home}/src/gov/nih/nci/caadapter/common/util/CaadapterUtil.java"
				  file="${mms.module.home}/src/gov/nih/nci/caadapter/common/util/GME_CaadapterUtil.java"
				overwrite="true">
			</copy>
			<copy tofile="docs/help.zip" file="docs/GME/help_gme.zip" overwrite="true"/>
	</target>	
	<target name="copyHL7CaadapterUtil" if="caadapter.release.hl7.build">
		<echo message="caadapter.release.hl7.only=${caadapter.release.hl7.only}"/>
		<copy toDir="${common.module.home}/src"
				overwrite="true">
			<fileset dir="${hl7.module.home}/src" includes="**/CaadapterUtil.java"/>
		</copy>
		
	</target>
	
	<target name="copyRef" if="ref.sqleonardo">
		<copy file="${ref_sqleonardo.jar}" tofile="${sqleonardo.jar}"/>
	</target>

    <target name="clean">
        <echo message="-------- clean ${project.name}  --------"/>
        <delete dir="${build.dir}" failonerror="false"/>
        <delete dir="${dist.dir}" failonerror="false"/>
        
		<delete failonerror="false">
		    <fileset dir="." includes="caadapter*.zip"/>
    	</delete>
    </target>

 
	<!-- ************************************************************************************************-->
	<!--                                             Add License  			                       -->
	<!-- ************************************************************************************************-->

	<path id="development.class.path">
		<fileset dir="${reference.dir}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
    	<fileset dir="${common.module.home}/lib">
            <include name="xercesImpl.jar"/>
            <include name="commons-logging-1.0.4.jar"/>
            <include name="log4j-1.2.8.jar"/>
    	</fileset>
	</path>

	<!-- target name="add-license" if="add-license">
		<echo message="*****************************************************"/>
		<echo message="**   Adding licenses ... ...                       **"/>
		<echo message="*****************************************************"/>
		<taskdef name="update-license" classname="gov.nih.nci.codegen.core.ant.LicenseUpdaterTask">
			<classpath refid="development.class.path"/>
		</taskdef>
		<echo message="${properties.dir}/license.txt" />
		<update-license logFile="log/addlicense.log" beginPattern="LICENSE_TEXT_START" endPattern="LICENSE_TEXT_END" licenseFile="${basedir}/etc/license/caAdapter_license_build.txt">
			<fileset dir="${basedir}">
				<include name="**/**.java"/>
			</fileset>
		</update-license>
	</target -->
	<!-- ================================= 
          target: generate keys              
         ================================= -->
    <target name="generate-keys"  unless="digital-keys.exist" description="generate sign keys" >
        <echo message=""/>
        <echo message="-------- Create a keyStore *disabled--------"/>
    	<delete file="${signjar.keystore}"/>
	   	<genkey alias="${jar-signing.keystore.alias}" storepass="${jar-signing.keystore.password}" keystore="${jar-signing.keystore.abs-location}" dname="CN=${certificate.subject.CN}, OU=${certificate.subject.OU}, O=${certificate.subject.O}, C=${certificate.subject.C}"/>
    </target>
    
	<target name="test.flag" >
		<condition property="generate-keys">
			<available file="NCIKeystore"/>
		</condition>
		<condition property="control.value">
			<equals arg1="${caadapter.release.mms.only}" arg2="true"/>
		</condition>
		<echo message="test.prop caadapter.release.mms.only: ${caadapter.release.mms.only}"/>
		<echo message="test.prop generate-keys: ${generate-keys}"/>
		<property name="copy.control" value="${caadapter.release.mms.only}"/>
		<echo message="control.value: ${control.value}"/>
		<antcall target="test.copy"/>
		<delete dir="temp"/>
	</target>
	<target name="test.copy" if="control.value">
			<copy todir="temp/src/demo" >
					<fileset dir="src/demo/"/> 
			</copy>
	</target>

</project>
