/*L
 * Copyright SAIC, SAIC-Frederick.
 *
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/caadapter/LICENSE.txt for details.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.12.23 at 11:43:13 AM EST 
//


package gov.nih.nci.cbiit.cmts.core;

import java.beans.PropertyDescriptor;
import java.util.ArrayList;
import java.util.List;

import gov.nih.nci.cbiit.cmts.ui.properties.PropertiesResult;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for attributeMeta complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="attributeMeta">
 *   &lt;complexContent>
 *     &lt;extension base="{http://cmts.cbiit.nci.nih.gov/core}baseMeta">
 *       &lt;attribute name="isRequired" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="isEnabled" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="isValid" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="isFixed" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="defaultValue" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "attributeMeta")
public class AttributeMeta
    extends BaseMeta
{

    @XmlAttribute
    protected String defaultValue;
    protected String fixedValue;
    @XmlAttribute
    protected Boolean isEnabled;
    @XmlAttribute
    protected Boolean isFixed;
    @XmlAttribute
    protected Boolean isRequired;
    @XmlAttribute
    protected Boolean isValid;

    /**
     * Gets the value of the defaultValue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDefaultValue() {
        return defaultValue;
    }

	/**
	 * @return the fixedValue
	 */
	public String getFixedValue() {
		return fixedValue;
	}

	@Override
	public PropertiesResult getPropertyDescriptors() throws Exception {
		Class beanClass = this.getClass();

		List<PropertyDescriptor> propList = new ArrayList<PropertyDescriptor>();
//		propList.add(new PropertyDescriptor("Name", beanClass, "getName", null));	
//		propList.add( new PropertyDescriptor("Id", beanClass, "getId", null));
//		propList.add(new PropertyDescriptor("IdSpec", beanClass, "getIdSpec", null));
//		
		propList.add(new PropertyDescriptor("Required", beanClass, "isIsRequired", null));	
		propList.add( new PropertyDescriptor("Default Value", beanClass, "getDefaultValue", null));
		propList.add( new PropertyDescriptor("Fixed Value", beanClass, "getFixedValue", null));
		propList.add(new PropertyDescriptor("Valid", beanClass, "isIsValid", null));

		PropertiesResult result =super.getPropertyDescriptors();// new PropertiesResult();
		result.addPropertyDescriptors(this, propList);
		return result;
	}

    public String getTitle() {
		// TODO Auto-generated method stub
		return "Attribute Properties";
	}

    /**
     * Gets the value of the isEnabled property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsEnabled() {
        return isEnabled;
    }

    /**
     * Gets the value of the isFixed property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsFixed() {
        return isFixed;
    }

    /**
     * Gets the value of the isRequired property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsRequired() {
        return isRequired;
    }

    /**
     * Gets the value of the isValid property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsValid() {
        return isValid;
    }

    /**
     * Sets the value of the defaultValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDefaultValue(String value) {
        this.defaultValue = value;
    }

    /**
	 * @param fixedValue the fixedValue to set
	 */
	public void setFixedValue(String fixedValue) {
		this.fixedValue = fixedValue;
	}

    /**
     * Sets the value of the isEnabled property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsEnabled(Boolean value) {
        this.isEnabled = value;
    }

    /**
     * Sets the value of the isFixed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsFixed(Boolean value) {
        this.isFixed = value;
    }
    
    /**
     * Sets the value of the isRequired property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsRequired(Boolean value) {
        this.isRequired = value;
    }

	/**
     * Sets the value of the isValid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsValid(Boolean value) {
        this.isValid = value;
    }

	@Override
	public String toString()
    {
    	StringBuffer rtBuffer=new StringBuffer();
    	rtBuffer.append(super.toString());
 
    	if (isIsRequired())
    		rtBuffer.append(" [Required");
    	else
    		rtBuffer.append(" [Optional");
    	
    	if (getFixedValue()!=null)
    		rtBuffer.append(":fixed/"+getFixedValue());
    	else if (getDefaultValue()!=null)
    		rtBuffer.append(":default/"+getDefaultValue());
    	
    	rtBuffer.append("]");
    	return rtBuffer.toString();
    }
}
