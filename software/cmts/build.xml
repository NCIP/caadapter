<!--L
  Copyright SAIC.

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/caadapter/LICENSE.txt for details.
L-->

<project name="Common Mapping and Transformation Service" default="build:caadapter-wars" basedir=".">
	<!-- Tell ant to use my environment variables -->
	<property environment="env" />
	<property file="./build.properties" />
	<property file="./execution.properties" />
	<property name="build.compiler" value="modern" />
	<path id="project.class.path">
		<fileset dir="${lib.dir}">    
			<include name="**/*.jar" />
			<include name="**/*.zip" />            
		</fileset>
		<pathelement location="${java.home}\lib\rt.jar"/>
	</path>

	<target name="build:caadapter-api" depends="init">
		<echo message="build:caadapter-api is called :dist.dir =${dist.dir}"/>
		<antcall target="dist_src"/>
		<antcall target="dist_bin"/>
   	</target>
   	
	<pathconvert pathsep=" " targetos="unix" property="distribution.manifest.class.property" refid="project.class.path">
		<!-- make paths relative-->
		<map from="${basedir}/lib" to="./lib" />
		<map from="${basedir}" to="." />
	</pathconvert>
	<target name="transform:xslt">
		<echo message="${ant.java.version}"/>
		<java classname="net.sf.saxon.Transform">
			 <arg value="-s:${source.data}"/>
			 <arg value="-xsl:${xslt.template}"/>
			 <arg value="-o:${result.data}"/>
			 <classpath>
			 	<pathelement location="${lib.dir}/saxon9.jar"/>
			 </classpath>
		</java>
	</target>
	<target name="transform:mapping">
		<echo message="${ant.java.version}"/>
		<echo message="${ant.library.dir}"/>
		<echo message="${java.runtime.name}"/>
		<echo message="${java.library.path}"/>
		<java classname="gov.nih.nci.cbiit.cmts.transform.MappingTransformer">
			 <arg value="${source.data}"/>
			 <arg value="${mapping.data}"/>
			 <arg value="${result.data}"/>
			 <classpath>
			 	<path refid="project.class.path" />
			 	<pathelement location="${dist.dir}/cmts.jar"/>
			 	<pathelement location="${dist.dir}/cmtsUI.jar"/>
			 </classpath>
		</java>
	</target>
	<target name="transform:xquery">
		<java classname="gov.nih.nci.cbiit.cmts.transform.XQueryTransformer">
			 <arg value="${source.data}"/>
			 <arg value="${xquery.expression}"/>
			 <arg value="${result.data}"/>
			 <classpath>
			 	<pathelement location="${lib.dir}/saxon9.jar"/>
			 	<pathelement location="${lib.dir}/saxon9-xqj.jar"/>
			 	<pathelement location="${lib.dir}/jdom.jar"/>
			 	<pathelement location="${dist.dir}/cmts.jar"/>
			 </classpath>
		</java>
	</target>
	<target name="build:caadapter-wars" depends="jar, webapp:copy_resources" >	
		<antcall target="webapp:sign_resources">
			<param name="RESOURCE_HOME" value="${dist.dir}/webapp"/>
		</antcall>
        
                
        
		<echo message=""/>
		<echo message="-------- creating ${webapp.warfile.name} file (copied to deploy/webapp) --------"/>
		<war destfile="${dist.dir}/${webapp.warfile.name}" webxml="${web.src.dir}/web.xml">
		    <lib dir="${web.src.dir}/WEB-INF/lib" >
			    <exclude name="jardiff.jar"/>
			    <exclude name="jnlp-servlet.jar"/>
			    <exclude name="jnlp.jar"/>
			    <exclude name="commons-fileupload-1.1.jar"/>
			    <exclude name="servlet.jar"/>
		    </lib>
			<fileset dir="${dist.dir}/webapp">
				<exclude name="${jar-signing.keystore.abs-location}"/>
			</fileset>
			<fileset dir="${web.src.dir}">
					<include name="**/*.html"/>
					<include name="**/*.bmp"/>
					<exclude name="**/*webapp*"/>
			</fileset>
			<classes dir="${web.src.dir}/WEB-INF/classes" />
			<!--zipfileset dir="./doc" includes="CMTS_User_Guide_Document.pdf" prefix="help"/-->
		</war>	
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="package.war" dir="src/webservices">	
			<property name="ws.module.name" value="caadapterWS-cmts" />
		</ant>
		<copy file="src/webservices/dist/caadapterWS-cmts.war" todir="${dist.dir}" overwrite="true" />
		
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="clean" dir="src/webservices"/>	
		<delete dir="${dist.dir}/webapp" failonerror="false"/>
        <!-- copy file="${dist.dir}/${webapp.warfile.name}" tofile="C:\apps\caadapter-webapp\jboss-5.1.0.GA\server\default\deploy\caadapter-cmts.war" overwrite="true" / -->
	</target>
   	   	
	<target name="webapp:copy_resources" description="Perpare web start resources...">  
		<echo message="build:webapp --copy resource"/>
		<copy todir="${dist.dir}/webapp" failonerror="false">
			<fileset dir="${lib.dir}">
				<include name="caAdapter.jar"/>
				<include name="commons-beanutils.jar"/>
				<include name="commons-logging-1.0.4.jar"/>
				<include name="dom4j-1.4.jar"/>
				<include name="BrowserLauncher2-1_3.jar"/>
				<!-- include name="encoderframework.jar"/>
				<include name="encoderfrmwk-xsdextension.jar"/>
				<include name="hl7.jar"/>
				<include name="hl7encoder-xsdextension.jar"/ -->
				<include name="jaxen-jdom.jar"/>
				<include name="jdom.jar"/>
				<include name="jgraph.jar"/>	
				<include name="log4j-1.2.8.jar"/>
				<include name="saxon9.jar"/>
				<include name="saxon9-xqj.jar"/>
				<include name="xbean.jar"/>
				<include name="xercesImpl.jar"/>
				<include name="plugin.jar"/>
				<include name="commons-io-2.0.1.jar"/>
				<!--include name="servlet.jar"/-->
				<!--include name="commons-fileupload-1.1.jar"/-->
			</fileset>
			<fileset dir="${dist.dir}">
				<include name="cmts.jar"/>
				<include name="cmtsUI.jar"/>
				<include name="cmts-resources.jar"/>
			</fileset>
		</copy>
	</target>
	
	<target name="webapp:sign_resources">
    	<available file="${jar-signing.keystore.abs-location}" property="digital-keys.exist"/>

	    <antcall target="generate-keys"/>
	    <echo message="digitally signing...${RESOURCE_HOME}"/>

	    <echo message="Key Store: ${jar-signing.keystore.abs-location}"/>
	    <echo message="-------- Signing all jar files --------"/>
	    <signjar alias="${jar-signing.keystore.alias}" storepass="${jar-signing.keystore.password}" keystore="${jar-signing.keystore.abs-location}" lazy="false">
		   	<fileset dir="${RESOURCE_HOME}" includes="*.jar, *.zip"/>
	    </signjar>
	</target>

	<target name="generate-keys"  unless="digital-keys.exist" description="generate sign keys" >
        <echo message=""/>
        <echo message="-------- Create a keyStore *disabled--------"/>
    	<delete file="${signjar.keystore}"/>
	   	<genkey alias="${jar-signing.keystore.alias}" storepass="${jar-signing.keystore.password}" keystore="${jar-signing.keystore.abs-location}" dname="CN=${certificate.subject.CN}, OU=${certificate.subject.OU}, O=${certificate.subject.O}, C=${certificate.subject.C}"/>
    </target>
    
    		
	<target name="dist_bin" depends="jar" description="create the binary distribution">
		<zip destfile="${dist.dir}/cmts_${release.version}_Bin_${DATE}.zip">
			<zipfileset dir="${lib.dir}" prefix="lib">
				<exclude name="rt.jar"/>
			</zipfileset>
			<zipfileset dir="${dist.dir}" prefix="lib">
				<include name="cmts.jar" />
				<include name="cmts-resources.jar" />
			</zipfileset>
			<zipfileset dir="${dist.dir}">
				<include name="cmtsUI.jar" />
			</zipfileset>
			<zipfileset dir="${basedir}">
				<include name="workingspace/**" />
				<include name="*.bat" />
				<include name="etc/**" />
			</zipfileset>
		</zip>
	</target>

	<target name="dist_src" depends="clean, init" description="create the source distribution">
		<zip destfile="${dist.dir}/cmts_${release.version}_Src_${DATE}.zip" basedir="${basedir}">
			<exclude name="bin/**" />
			<exclude name="build/**" />
			<exclude name="dist/**" />
			<exclude name="log/**" />
			<exclude name="classes/**" />
			<exclude name="**/CVS/**" />
			<exclude name="**/.svn/**" />
			<exclude name="workingspace/hl7v3/**" />
			<exclude name="workingspace/hl7v2/**" />
			<exclude name="workingspace/RDF/**" />
			<exclude name="workingspace/CDSIC_ODM/**" />
			<exclude name="workingspace/cda2/**" />
			<exclude name="workingspace/coreschemas/**" />
			<exclude name="doc/**" />
		</zip>
	</target>
	
	<target name="jar" depends="compile" description="create the distribution jars">
		<echo> ${distribution.manifest.class.property} </echo>
		<!--copy file="${build.dir}/gov/nih/nci/cbiit/cmts/web/WebFunctionService.class" tofile="${web.src.dir}/WEB-INF/classes/gov/nih/nci/cbiit/cmts/web/WebFunctionService.class" overwrite="true" />
		<delete file="${build.dir}/gov/nih/nci/cbiit/cmts/web/WebFunctionService.class" failonerror="true" /-->
		<jar destfile="${dist.dir}/cmts.jar">
			<fileset dir="${build.dir}" excludes="**/Test.class"/>
		</jar>
		<jar destfile="${dist.dir}/cmts-resources.jar">
			<fileset dir="${resources.dir}" excludes="**/CVS/**" />
			<!--<fileset dir="${etc.dir}" includes="CMTS_About.txt" />-->
			<fileset dir="${etc.dir}" includes="**" />
		</jar>
		<jar destfile="${dist.dir}/cmtsUI.jar">
			<fileset dir="${build.dir}" includes="**/ui/**" />
			<manifest>
				<attribute name="Main-Class" value="gov.nih.nci.cbiit.cmts.ui.main.MainFrame" />
				<attribute name="Class-Path" value=". lib/cmts.jar lib/cmts-resources.jar ${distribution.manifest.class.property}" />
			</manifest>
		</jar>
		
		
        <delete dir="${build.dir}" failonerror="false"/>		
		<delete dir="${build.dir}" failonerror="false"/>
		<copy file="${dist.dir}/cmts.jar" tofile="${lib.dir}/cmts.jar" overwrite="true" />
		<copy file="${dist.dir}/cmts.jar" tofile="${web.src.dir}/WEB-INF/lib/cmts.jar" overwrite="true" />
		<copy file="${dist.dir}/cmts-resources.jar" tofile="${lib.dir}/cmts-resources.jar" overwrite="true" />
	</target>
	
	<target name="clean">
		<delete dir="${build.dir}" includeEmptyDirs="true" />
		<delete dir="${dist.dir}" includeEmptyDirs="true" />
		<delete>
			<fileset dir="." includes="*.zip" />
		</delete>
	</target>

	<target name="init" depends="clean">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<echo message="java.class.path:${java.class.path}"/>  
		<echo message="java.home:${java.home}"/>
		<tstamp>
			<format property="DATE" pattern="MM-dd-yy" locale="en_us" />
		</tstamp>
		<echo message="env:${environment}"/>
		<echo message="java.endorsed.dirs:${java.endorsed.dirs}"/>
		<echo message="java.specification.version:${java.specification.version}"/>
		<echo message="java.vm.name:${java.vm.name}"/>
		<echo message="java.vm.specification.version:${java.vm.specification.version}"/>
		<echo message="java.vm.version:${java.vm.version}"/>
		<echo message="java.ext.dirs:${java.ext.dirs}"/>
		<echo message="java.library.path:${java.library.path}"/>
	</target>
	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" destdir="${build.dir}" target="1.6" debug="on" deprecation="off">
			<!-- fork="yes" executable="c:\java\jdk1.6.0_20\bin\javac" -->
			<include name="**/*.java" />
			<classpath>
				<path refid="project.class.path" />
			</classpath>		
		</javac>
	</target>
	
	<target name="local.deploy" depends="build:caadapter-wars">
		<copy file="${dist.dir}/${webapp.warfile.name}" todir="C:\apps\caadapter-webapp\jboss-5.1.0.GA\server\default\deploy" overwrite="true"/>
		<copy file="${dist.dir}/caadapterWS-cmts.war" todir="C:\apps\caadapter-webapp\jboss-5.1.0.GA\server\default\deploy" overwrite="true" />
   	</target>
    <property name="jboss.host" value="localhost" />
    <property name="jboss.port" value="30210" />
    <property name="jboss.home" value="C:\apps\caadapter-webapp\jboss-5.1.0.GA" />
     <property name="deploy.configuration" value="${jboss.home}/server/default/conf" />
    <target name="jboss.check.running">
        <condition property="jboss_already_running" value="true">
            <and>
                <socket server="${jboss.host}" port="${jboss.port}"/>
                <http url="http://${jboss.host}:${jboss.port}/jmx-console/index.jsp"/>
            </and>
        </condition>
        <echo>JBoss is already running on ${jboss.host}:${jboss.port} - [${jboss_already_running}]</echo>
    </target>
    <target name="jboss.start" depends="local.deploy, jboss.shutdown" description="Start the JBoss server.">
		<!-- java dir="${deploy.configuration}" 
			classname="org.jboss.Main" fork="true" spawn="true">
			<arg line="-c ${deploy.configuration}"/>
			<jvmarg value="-Xms32m"/>
			<jvmarg value="-Xmx200m"/>
			<classpath>
				<pathelement path="${jboss.home}/bin/run.jar"/>
				<pathelement path="${jdk.home}/lib/tools.jar"/>
			</classpath>
		</java -->
		<exec executable="${jboss.home}/bin/run.bat" dir="${jboss.home}/bin"/>   
	</target>

	<target name="jboss.shutdown">
		<java dir="${deploy.configuration}" 
			classname="org.jboss.Shutdown" fork="true">
			<arg line="@{jboss.host} @{jboss.port}"/>
			<classpath>
				<pathelement path="${jboss.home}/bin/shutdown.jar"/>
			</classpath>
		</java>
	</target>


	<target name="doc" description="Generate JavaDoc">
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="CMTS">

			<packageset dir="${src.dir}" defaultexcludes="yes">
				<include name="gov/nih/nci/cbiit/cmts/**" />
			</packageset>

			<doctitle>
				CMTS
			</doctitle>
			<bottom>

			</bottom>
			<tag name="todo" scope="all" description="To do:" />
			<link href="http://java.sun.com/javase/6/docs/api/" />
		</javadoc>
	</target>

</project>
