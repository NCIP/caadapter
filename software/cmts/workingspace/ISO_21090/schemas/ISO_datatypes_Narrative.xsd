<?xml version="1.0" encoding="UTF-8"?>
<!--
Changelog:
1. smatyas: Added targetNamespace="uri:iso.org:21090" xmlns="uri:iso.org:21090" to xsd:schema definition 
2. smatyas: maxOccurs="0" causes the schema to be invalid w/ Xerces-J. Basically, we need a way to cause ST.NT.translations to not exist within a ST.NT element however, this doesn't seem feasible. To move forward setting to maxOccurs="1"
<xsd:element name="translation" type="ST" minOccurs="0" maxOccurs="0" />
 -->
<xsd:schema elementFormDefault="qualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:sch="http://www.ascc.net/xml/schematron" targetNamespace="uri:iso.org:21090" xmlns="uri:iso.org:21090">
    <xsd:complexType name="Narrative" mixed="true">
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
            <xsd:element ref="content"/>
            <xsd:element ref="linkHtml"/>
            <xsd:element ref="sub"/>
            <xsd:element ref="sup"/>
            <xsd:element ref="br"/>
            <xsd:element ref="footnote"/>
            <xsd:element ref="footnoteRef"/>
            <xsd:element ref="renderMultiMedia"/>
            <xsd:element ref="paragraph"/>
            <xsd:element ref="list"/>
            <xsd:element ref="table"/>
        </xsd:choice>
        <xsd:attribute name="ID" type="xsd:ID"/>
        <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
    </xsd:complexType>
    <xsd:element name="text" type="Narrative"/>
    <xsd:element name="br">
        <xsd:complexType/>
    </xsd:element>
    <xsd:element name="caption">
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="linkHtml"/>
                <xsd:element ref="sub"/>
                <xsd:element ref="sup"/>
                <xsd:element ref="footnote"/>
                <xsd:element ref="footnoteRef"/>
            </xsd:choice>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="col">
        <xsd:complexType>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="span" type="xsd:string" default="1"/>
            <xsd:attribute name="width" type="xsd:string"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="colgroup">
        <xsd:complexType>
            <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="col"/>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="span" type="xsd:string" default="1"/>
            <xsd:attribute name="width" type="xsd:string"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="content">
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="content"/>
                <xsd:element ref="linkHtml"/>
                <xsd:element ref="sub"/>
                <xsd:element ref="sup"/>
                <xsd:element ref="br"/>
                <xsd:element ref="footnote"/>
                <xsd:element ref="footnoteRef"/>
                <xsd:element ref="renderMultiMedia"/>
            </xsd:choice>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="revised">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="insert"/>
                        <xsd:enumeration value="delete"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="footnote">
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="content"/>
                <xsd:element ref="linkHtml"/>
                <xsd:element ref="sub"/>
                <xsd:element ref="sup"/>
                <xsd:element ref="br"/>
                <xsd:element ref="renderMultiMedia"/>
                <xsd:element ref="paragraph"/>
                <xsd:element ref="list"/>
                <xsd:element ref="table"/>
            </xsd:choice>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="footnoteRef">
        <xsd:complexType>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="item">
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:element ref="caption" minOccurs="0"/>
                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element ref="content"/>
                    <xsd:element ref="linkHtml"/>
                    <xsd:element ref="sub"/>
                    <xsd:element ref="sup"/>
                    <xsd:element ref="br"/>
                    <xsd:element ref="footnote"/>
                    <xsd:element ref="footnoteRef"/>
                    <xsd:element ref="renderMultiMedia"/>
                    <xsd:element ref="paragraph"/>
                    <xsd:element ref="list"/>
                    <xsd:element ref="table"/>
                </xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="linkHtml">
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="footnote"/>
                <xsd:element ref="footnoteRef"/>
            </xsd:choice>
            <xsd:attribute name="name" type="xsd:string"/>
            <xsd:attribute name="href" type="xsd:string"/>
            <xsd:attribute name="rel" type="xsd:string"/>
            <xsd:attribute name="rev" type="xsd:string"/>
            <xsd:attribute name="title" type="xsd:string"/>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="list">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="caption" minOccurs="0"/>
                <xsd:element ref="item" maxOccurs="unbounded"/>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="listType" default="unordered">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="ordered"/>
                        <xsd:enumeration value="unordered"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="paragraph">
        <xsd:complexType mixed="true">
            <xsd:sequence>
                <xsd:element ref="caption" minOccurs="0"/>
                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element ref="content"/>
                    <xsd:element ref="linkHtml"/>
                    <xsd:element ref="sub"/>
                    <xsd:element ref="sup"/>
                    <xsd:element ref="br"/>
                    <xsd:element ref="footnote"/>
                    <xsd:element ref="footnoteRef"/>
                    <xsd:element ref="renderMultiMedia"/>
                </xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="renderMultiMedia">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="caption" minOccurs="0"/>
            </xsd:sequence>
            <xsd:attribute name="referencedObject" type="xsd:IDREFS" use="required"/>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="sub" type="xsd:string"/>
    <xsd:element name="sup" type="xsd:string"/>
    <xsd:element name="table">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="caption" minOccurs="0"/>
                <xsd:choice>
                    <xsd:element ref="col" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element ref="colgroup" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:choice>
                <xsd:element ref="thead" minOccurs="0"/>
                <xsd:element ref="tfoot" minOccurs="0"/>
                <xsd:element ref="tbody" maxOccurs="unbounded"/>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="summary" type="xsd:string"/>
            <xsd:attribute name="width" type="xsd:string"/>
            <xsd:attribute name="border" type="xsd:string"/>
            <xsd:attribute name="frame">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="void"/>
                        <xsd:enumeration value="above"/>
                        <xsd:enumeration value="below"/>
                        <xsd:enumeration value="hsides"/>
                        <xsd:enumeration value="lhs"/>
                        <xsd:enumeration value="rhs"/>
                        <xsd:enumeration value="vsides"/>
                        <xsd:enumeration value="box"/>
                        <xsd:enumeration value="border"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="rules">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="none"/>
                        <xsd:enumeration value="groups"/>
                        <xsd:enumeration value="rows"/>
                        <xsd:enumeration value="cols"/>
                        <xsd:enumeration value="all"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="cellspacing" type="xsd:string"/>
            <xsd:attribute name="cellpadding" type="xsd:string"/>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="tbody">
        <xsd:complexType>
            <xsd:sequence maxOccurs="unbounded">
                <xsd:element ref="tr"/>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="td">
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="content"/>
                <xsd:element ref="linkHtml"/>
                <xsd:element ref="sub"/>
                <xsd:element ref="sup"/>
                <xsd:element ref="br"/>
                <xsd:element ref="footnote"/>
                <xsd:element ref="footnoteRef"/>
                <xsd:element ref="renderMultiMedia"/>
                <xsd:element ref="paragraph"/>
                <xsd:element ref="list"/>
            </xsd:choice>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="abbr" type="xsd:string"/>
            <xsd:attribute name="axis" type="xsd:string"/>
            <xsd:attribute name="headers" type="xsd:IDREFS"/>
            <xsd:attribute name="scope">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="row"/>
                        <xsd:enumeration value="col"/>
                        <xsd:enumeration value="rowgroup"/>
                        <xsd:enumeration value="colgroup"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="rowspan" type="xsd:string" default="1"/>
            <xsd:attribute name="colspan" type="xsd:string" default="1"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="tfoot">
        <xsd:complexType>
            <xsd:sequence maxOccurs="unbounded">
                <xsd:element ref="tr"/>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="th">
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="content"/>
                <xsd:element ref="linkHtml"/>
                <xsd:element ref="sub"/>
                <xsd:element ref="sup"/>
                <xsd:element ref="br"/>
                <xsd:element ref="footnote"/>
                <xsd:element ref="footnoteRef"/>
                <xsd:element ref="renderMultiMedia"/>
            </xsd:choice>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="abbr" type="xsd:string"/>
            <xsd:attribute name="axis" type="xsd:string"/>
            <xsd:attribute name="headers" type="xsd:IDREFS"/>
            <xsd:attribute name="scope">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="row"/>
                        <xsd:enumeration value="col"/>
                        <xsd:enumeration value="rowgroup"/>
                        <xsd:enumeration value="colgroup"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="rowspan" type="xsd:string" default="1"/>
            <xsd:attribute name="colspan" type="xsd:string" default="1"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="thead">
        <xsd:complexType>
            <xsd:sequence maxOccurs="unbounded">
                <xsd:element ref="tr"/>
            </xsd:sequence>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="tr">
        <xsd:complexType>
            <xsd:choice maxOccurs="unbounded">
                <xsd:element ref="th"/>
                <xsd:element ref="td"/>
            </xsd:choice>
            <xsd:attribute name="ID" type="xsd:ID"/>
            <xsd:attribute name="language" type="xsd:NMTOKEN"/>
            <xsd:attribute name="styleCode" type="xsd:NMTOKENS"/>
            <xsd:attribute name="align">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="left"/>
                        <xsd:enumeration value="center"/>
                        <xsd:enumeration value="right"/>
                        <xsd:enumeration value="justify"/>
                        <xsd:enumeration value="char"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="char" type="xsd:string"/>
            <xsd:attribute name="charoff" type="xsd:string"/>
            <xsd:attribute name="valign">
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="top"/>
                        <xsd:enumeration value="middle"/>
                        <xsd:enumeration value="bottom"/>
                        <xsd:enumeration value="baseline"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

  <xsd:simpleType name="NullFlavor">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="NI" />
      <xsd:enumeration value="INV" />
      <xsd:enumeration value="OTH" />
      <xsd:enumeration value="NINF" />
      <xsd:enumeration value="PINF" />
      <xsd:enumeration value="UNC" />
      <xsd:enumeration value="DER" />
      <xsd:enumeration value="UNK" />
      <xsd:enumeration value="ASKU" />
      <xsd:enumeration value="NAV" />
      <xsd:enumeration value="QS" />
      <xsd:enumeration value="NASK" />
      <xsd:enumeration value="TRC" />
      <xsd:enumeration value="MSK" />
      <xsd:enumeration value="NA" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="UpdateMode">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="A" />
      <xsd:enumeration value="AU" />
      <xsd:enumeration value="U" />
      <xsd:enumeration value="R" />
      <xsd:enumeration value="I" />
      <xsd:enumeration value="D" />
      <xsd:enumeration value="REF" />
      <xsd:enumeration value="K" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Compression">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="DF" />
      <xsd:enumeration value="GZ" />
      <xsd:enumeration value="ZL" />
      <xsd:enumeration value="Z" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="IntegrityCheckAlgorithm">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="SHA1" />
      <xsd:enumeration value="SHA256" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="TelecommunicationAddressUse">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="H" />
      <xsd:enumeration value="HP" />
      <xsd:enumeration value="HV" />
      <xsd:enumeration value="WP" />
      <xsd:enumeration value="DIR" />
      <xsd:enumeration value="PUB" />
      <xsd:enumeration value="BAD" />
      <xsd:enumeration value="TMP" />
      <xsd:enumeration value="AS" />
      <xsd:enumeration value="EC" />
      <xsd:enumeration value="MC" />
      <xsd:enumeration value="PG" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="set_TelecommunicationAddressUse">
    <xsd:list itemType="TelecommunicationAddressUse" />
  </xsd:simpleType>
  <xsd:simpleType name="IdentifierScope">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BUSN" />
      <xsd:enumeration value="OBJ" />
      <xsd:enumeration value="VER" />
      <xsd:enumeration value="VW" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="IdentifierReliability">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ISS" />
      <xsd:enumeration value="VRF" />
      <xsd:enumeration value="USE" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AddressPartType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="AL" />
      <xsd:enumeration value="ADL" />
      <xsd:enumeration value="UNID" />
      <xsd:enumeration value="UNIT" />
      <xsd:enumeration value="DAL" />
      <xsd:enumeration value="DINST" />
      <xsd:enumeration value="DINSTA" />
      <xsd:enumeration value="DINSTQ" />
      <xsd:enumeration value="DMOD" />
      <xsd:enumeration value="DMODID" />
      <xsd:enumeration value="SAL" />
      <xsd:enumeration value="BNR" />
      <xsd:enumeration value="BNN" />
      <xsd:enumeration value="BNS" />
      <xsd:enumeration value="STR" />
      <xsd:enumeration value="STB" />
      <xsd:enumeration value="STTYP" />
      <xsd:enumeration value="DIR" />
      <xsd:enumeration value="CAR" />
      <xsd:enumeration value="CEN" />
      <xsd:enumeration value="CNT" />
      <xsd:enumeration value="CPA" />
      <xsd:enumeration value="CTY" />
      <xsd:enumeration value="DEL" />
      <xsd:enumeration value="POB" />
      <xsd:enumeration value="PRE" />
      <xsd:enumeration value="STA" />
      <xsd:enumeration value="ZIP" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="PostalAddressUse">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="H" />
      <xsd:enumeration value="HP" />
      <xsd:enumeration value="HV" />
      <xsd:enumeration value="WP" />
      <xsd:enumeration value="DIR" />
      <xsd:enumeration value="PUB" />
      <xsd:enumeration value="BAD" />
      <xsd:enumeration value="TMP" />
      <xsd:enumeration value="ABC" />
      <xsd:enumeration value="IDE" />
      <xsd:enumeration value="SYL" />
      <xsd:enumeration value="PHYS" />
      <xsd:enumeration value="PST" />
      <xsd:enumeration value="SNDX" />
      <xsd:enumeration value="PHON" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="set_PostalAddressUse">
    <xsd:list itemType="PostalAddressUse" />
  </xsd:simpleType>
  <xsd:simpleType name="EntityNamePartType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="FAM" />
      <xsd:enumeration value="GIV" />
      <xsd:enumeration value="PFX" />
      <xsd:enumeration value="SFX" />
      <xsd:enumeration value="DEL" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="EntityNamePartQualifier">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="LS" />
      <xsd:enumeration value="AC" />
      <xsd:enumeration value="NB" />
      <xsd:enumeration value="PR" />
      <xsd:enumeration value="VV" />
      <xsd:enumeration value="AD" />
      <xsd:enumeration value="BR" />
      <xsd:enumeration value="SP" />
      <xsd:enumeration value="CL" />
      <xsd:enumeration value="IN" />
      <xsd:enumeration value="TITLE" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="set_EntityNamePartQualifier">
    <xsd:list itemType="EntityNamePartQualifier" />
  </xsd:simpleType>
  <xsd:simpleType name="EntityNameUse">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="C" />
      <xsd:enumeration value="I" />
      <xsd:enumeration value="L" />
      <xsd:enumeration value="P" />
      <xsd:enumeration value="A" />
      <xsd:enumeration value="R" />
      <xsd:enumeration value="PHON" />
      <xsd:enumeration value="SNDX" />
      <xsd:enumeration value="ABC" />
      <xsd:enumeration value="SYL" />
      <xsd:enumeration value="IDE" />
      <xsd:enumeration value="ASGN" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="set_EntityNameUse">
    <xsd:list itemType="EntityNameUse" />
  </xsd:simpleType>
  <xsd:simpleType name="CalendarCycle">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="CY" />
      <xsd:enumeration value="MY" />
      <xsd:enumeration value="CM" />
      <xsd:enumeration value="CW" />
      <xsd:enumeration value="WY" />
      <xsd:enumeration value="DM" />
      <xsd:enumeration value="CD" />
      <xsd:enumeration value="DY" />
      <xsd:enumeration value="DW" />
      <xsd:enumeration value="HD" />
      <xsd:enumeration value="CH" />
      <xsd:enumeration value="NH" />
      <xsd:enumeration value="CN" />
      <xsd:enumeration value="SN" />
      <xsd:enumeration value="CS" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="TimingEvent">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="C" />
      <xsd:enumeration value="CD" />
      <xsd:enumeration value="CM" />
      <xsd:enumeration value="CV" />
      <xsd:enumeration value="HS" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CodingRationale">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="O" />
      <xsd:enumeration value="P" />
      <xsd:enumeration value="R" />
      <xsd:enumeration value="S" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="set_CodingRationale">
    <xsd:list itemType="CodingRationale" />
  </xsd:simpleType>
  <xsd:simpleType name="UncertaintyType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="U" />
      <xsd:enumeration value="N" />
      <xsd:enumeration value="LN" />
      <xsd:enumeration value="G" />
      <xsd:enumeration value="E" />
      <xsd:enumeration value="X2" />
      <xsd:enumeration value="T" />
      <xsd:enumeration value="F" />
      <xsd:enumeration value="B" />
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Uid">
    <xsd:restriction base="xsd:string" />
  </xsd:simpleType>
  <xsd:simpleType name="Uri">
    <xsd:restriction base="xsd:anyURI" />
  </xsd:simpleType>
  <xsd:simpleType name="Code">
    <xsd:restriction base="xsd:string" />
  </xsd:simpleType>
  <xsd:complexType name="BL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value if not null">
          <sch:rule abstract="true" id="BL-0">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @value)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:attribute name="value" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="ANY">
    <xsd:complexContent>
      <xsd:extension base="HXIT">
        <xsd:attribute name="nullFlavor" type="NullFlavor" use="optional" />
        <xsd:attribute name="flavorId" type="xsd:string" use="optional" />
        <xsd:attribute name="updateMode" type="UpdateMode" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="HXIT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="extension requires root">
          <sch:rule abstract="true" id="HXIT-0">
            <sch:assert test="not(@controlActExtension) or @controlActRoot" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:attribute name="validTimeLow" type="xsd:string" use="optional" />
    <xsd:attribute name="validTimeHigh" type="xsd:string" use="optional" />
    <xsd:attribute name="controlActRoot" type="Uid" use="optional" />
    <xsd:attribute name="controlActExtension" type="xsd:string" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="BL.NonNull">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="BL.NonNull cannot be null">
          <sch:rule abstract="true" id="BL.NonNull-0">
            <sch:assert test="not(@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="BL">
        <xsd:attribute name="nullFlavor" type="NullFlavor" use="prohibited" />
        <xsd:attribute name="value" type="xsd:boolean" use="required" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="only one of value, data, xml">
          <sch:rule abstract="true" id="ED-0">
            <sch:assert test="count(*[self::value or self::xml or self::data])&#60;=1" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="integrityCheckAlgorithm required">
          <sch:rule abstract="true" id="ED-1">
            <sch:assert test="not(integrityCheck) or @integrityCheckAlgorithm" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="thumbnail has value">
          <sch:rule abstract="true" id="ED-2">
            <sch:assert test="not(thumbnail) or thumbnail[(not(@nullFlavor) and count(*[self::@value or self::xml or self::data])=1) or (@nullFlavor and count(*[self::@value or self::xml or self::data])=0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="thumbnails do not use reference">
          <sch:rule abstract="true" id="ED-3">
            <sch:assert test="not(thumbnail) or thumbnail[not(@nullFlavor and reference)]" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="thumbnails do not have thumbnails">
          <sch:rule abstract="true" id="ED-4">
            <sch:assert test="not(thumbnail) or thumbnail[not(thumbnail)]" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="content is required if not null">
          <sch:rule abstract="true" id="ED-5">
            <sch:assert test="@nullFlavor or @value or xml or data" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="compression only on binary">
          <sch:rule abstract="true" id="ED-6">
            <sch:assert test="(@compression and data) or not(@compression or data)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="ED-7">
            <sch:assert test="count(*[self::reference or self::thumbnail][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="mediaType cannot be null">
          <sch:rule abstract="true" id="ED-8">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @mediaType)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="value implies mediaType is text/plain">
          <sch:rule abstract="true" id="ED-9">
            <sch:assert test="not(@value) or (@value and (not(@mediaType) or @mediaType=&#39;text/plain&#39;))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no charset for value or xml">
          <sch:rule abstract="true" id="ED-10">
            <sch:assert test="not(@value or xml) or not(@charset)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no nested translations">
          <sch:rule abstract="true" id="ED-11">
            <sch:assert test="not(translation) or thumbnail[not(translation)]" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no value if null">
          <sch:rule abstract="true" id="ED-12">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@value))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no data if null">
          <sch:rule abstract="true" id="ED-13">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@data))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no xml if null">
          <sch:rule abstract="true" id="ED-14">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@xml))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no reference if null">
          <sch:rule abstract="true" id="ED-15">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@reference))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no mediaType if null">
          <sch:rule abstract="true" id="ED-16">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@mediaType))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no charset if null">
          <sch:rule abstract="true" id="ED-17">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@charset))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no language if null">
          <sch:rule abstract="true" id="ED-18">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@language))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no compression if null">
          <sch:rule abstract="true" id="ED-19">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@compression))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no integrityCheck if null">
          <sch:rule abstract="true" id="ED-20">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@integrityCheck))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no integrityCheckAlgorithm if null">
          <sch:rule abstract="true" id="ED-21">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@integrityCheckAlgorithm))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no thumbnail if null">
          <sch:rule abstract="true" id="ED-22">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@thumbnail))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no translation if null">
          <sch:rule abstract="true" id="ED-23">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@translation))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="1" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:string" use="optional" />
        <xsd:attribute name="mediaType" type="xsd:string" default="text/plain" use="optional" />
        <xsd:attribute name="charset" type="Code" use="optional" />
        <xsd:attribute name="language" type="Code" use="optional" />
        <xsd:attribute name="compression" type="Compression" use="optional" />
        <xsd:attribute name="integrityCheckAlgorithm" type="IntegrityCheckAlgorithm" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TEL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no updateMode or History on TEL attributes">
          <sch:rule abstract="true" id="TEL-0">
            <sch:assert test="count(*[self::useablePeriod][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no use if null">
          <sch:rule abstract="true" id="TEL-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@use))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no useablePeriod if null">
          <sch:rule abstract="true" id="TEL-2">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@useablePeriod))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="URL">
        <xsd:sequence>
          <xsd:element name="useablePeriod" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="use" type="set_TelecommunicationAddressUse" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="URL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value is required">
          <sch:rule abstract="true" id="URL-0">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no value if null">
          <sch:rule abstract="true" id="URL-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@value))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:attribute name="value" type="xsd:anyURI" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_TS-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Text">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="text only">
          <sch:rule abstract="true" id="ED.Text-0">
            <sch:assert test="@mediaType = &#34;&#39;text/plain&#39;&#34;" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no xml">
          <sch:rule abstract="true" id="ED.Text-1">
            <sch:assert test="not(xml)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no data">
          <sch:rule abstract="true" id="ED.Text-2">
            <sch:assert test="not(data)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no integrityCheck">
          <sch:rule abstract="true" id="ED.Text-3">
            <sch:assert test="not(integrityCheck)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no thumbnail">
          <sch:rule abstract="true" id="ED.Text-4">
            <sch:assert test="not(thumbnail)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no compression">
          <sch:rule abstract="true" id="ED.Text-5">
            <sch:assert test="not(@compression)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="ED.Text-6">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="0" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="0" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="0" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="0" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="mediaType" type="xsd:string" fixed="text/plain" use="required" />
        <xsd:attribute name="compression" type="Compression" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Image">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="fixed to image">
          <sch:rule abstract="true" id="ED.Image-0">
            <sch:assert test="starts-with(@mediaType, &#34;image/&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no text">
          <sch:rule abstract="true" id="ED.Image-1">
            <sch:assert test="not(@value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no xml">
          <sch:rule abstract="true" id="ED.Image-2">
            <sch:assert test="not(xml)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="1" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="mediaType" type="xsd:string" use="required" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Doc">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="mediaType">
          <sch:rule abstract="true" id="ED.Doc-0">
            <sch:assert test="mediaType = &#34;text/plain&#34; or mediaType = &#34;text/html&#34; or mediaType = &#34;text/xml&#34; or mediaType = &#34;application/pdf&#34;" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="1" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="mediaType" type="xsd:string" use="required" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Doc.Ref">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="reference required">
          <sch:rule abstract="true" id="ED.Doc.Ref-0">
            <sch:assert test="not(@nullFlavor) or (reference and not(reference/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED.Doc">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="0" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="0" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:string" use="prohibited" />
        <xsd:attribute name="mediaType" type="xsd:string" use="required" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Doc.Inline">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no reference">
          <sch:rule abstract="true" id="ED.Doc.Inline-0">
            <sch:assert test="not(reference)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED.Doc">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="1" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="0" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="mediaType" type="xsd:string" use="required" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Signature">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no reference">
          <sch:rule abstract="true" id="ED.Signature-0">
            <sch:assert test="not(reference)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no value">
          <sch:rule abstract="true" id="ED.Signature-1">
            <sch:assert test="not(@value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no data">
          <sch:rule abstract="true" id="ED.Signature-2">
            <sch:assert test="not(data)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no integrityCheck">
          <sch:rule abstract="true" id="ED.Signature-3">
            <sch:assert test="not(integrityCheck)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no thumbnail">
          <sch:rule abstract="true" id="ED.Signature-4">
            <sch:assert test="not(thumbnail)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no compression">
          <sch:rule abstract="true" id="ED.Signature-5">
            <sch:assert test="not(@compression)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no language">
          <sch:rule abstract="true" id="ED.Signature-6">
            <sch:assert test="not(@language)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="mediaType">
          <sch:rule abstract="true" id="ED.Signature-7">
            <sch:assert test="@mediaType = &#34;&#39;text/xml&#39;&#34;" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="ED.Signature-8">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="0" />
          <xsd:element name="xml" type="xsd:anyType" minOccurs="0" maxOccurs="1" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="0" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="0" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="0" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:string" use="prohibited" />
        <xsd:attribute name="mediaType" type="xsd:string" fixed="text/xml" use="required" />
        <xsd:attribute name="language" type="Code" use="prohibited" />
        <xsd:attribute name="compression" type="Compression" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ED.Narrative">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="mediatype">
          <sch:rule abstract="true" id="ED.Narrative-0">
            <sch:assert test="@mediaType = &#34;&#39;text/x-hl7-text+xml&#39;&#34;" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no value">
          <sch:rule abstract="true" id="ED.Narrative-1">
            <sch:assert test="not(@value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no data">
          <sch:rule abstract="true" id="ED.Narrative-2">
            <sch:assert test="not(data)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="ED.Narrative-3">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ED">
        <xsd:sequence>
          <xsd:element name="data" type="xsd:base64Binary" minOccurs="0" maxOccurs="0" />
          <xsd:element name="xml" type="Narrative" minOccurs="0" maxOccurs="1" />
          <xsd:element name="reference" type="TEL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="integrityCheck" type="xsd:base64Binary" minOccurs="0" maxOccurs="1" />
          <xsd:element name="thumbnail" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="ED" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:string" use="prohibited" />
        <xsd:attribute name="mediaType" type="xsd:string" fixed="text/x-hl7-text+xml" use="required" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ST">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no nested translations">
          <sch:rule abstract="true" id="ST-0">
            <sch:assert test="not(translation) or thumbnail[not(translation)]" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="null or content">
          <sch:rule abstract="true" id="ST-1">
            <sch:assert test="(@nullFlavor or (@value and string-length(@value)&#38;gt;0)) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="translation" type="ST" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:string" use="optional" />
        <xsd:attribute name="language" type="Code" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ST.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="ST.NT-0">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="ST">
        <xsd:sequence>
          <!-- Changelog 2. smatyas: maxOccurs="0" causes the schema to be invalid w/ Xerces-J; 
          basically, we need a way to cause ST.translation to not exist within a ST.NT value; 
          to move forward setting to maxOccurs="1"
          <xsd:element name="translation" type="ST" minOccurs="0" maxOccurs="0" />
           -->
          <xsd:element name="translation" type="ST" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SC">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no code if no value">
          <sch:rule abstract="true" id="SC-0">
            <sch:assert test="not(@nullFlavor) or (not(code) or (code/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SC attributes">
          <sch:rule abstract="true" id="SC-1">
            <sch:assert test="count(*[self::code][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ST">
        <xsd:sequence>
          <xsd:element name="code" type="CD" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or code and/or originalText">
          <sch:rule abstract="true" id="CD-0">
            <sch:assert test="@nullFlavor or @code or (originalText and not(originalText/@nullFlavor) or (originalTextReference and not(originalTextReference/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="qualifiers only if code">
          <sch:rule abstract="true" id="CD-1">
            <sch:assert test="not(qualifier) or @code" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="code requires codeSystem">
          <sch:rule abstract="true" id="CD-2">
            <sch:assert test="@codeSystem or not(@code)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="codeSystemName only if codeSystem">
          <sch:rule abstract="true" id="CD-3">
            <sch:assert test="@codeSystem or not(@codeSystemName)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="codeSystemVersion only if codeSystem">
          <sch:rule abstract="true" id="CD-4">
            <sch:assert test="@codeSystem or not(@codeSystemVersion)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="displayName only if code">
          <sch:rule abstract="true" id="CD-5">
            <sch:assert test="@code or not(@displayName)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="valueSet only when code and codeSystem are blank">
          <sch:rule abstract="true" id="CD-6">
            <sch:assert test="not(@valueSet) or (not(@code) and not(@codeSystem))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No original text on translations">
          <sch:rule abstract="true" id="CD-7">
            <sch:assert test="not translation/originalText" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="Translations cannot have translations">
          <sch:rule abstract="true" id="CD-8">
            <sch:assert test="not translation/translation" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on CD elements">
          <sch:rule abstract="true" id="CD-9">
            <sch:assert test="count(*[self::displayName or self::originalText or self::originalTextReference or self::translation][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no code if null">
          <sch:rule abstract="true" id="CD-10">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@code))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no displayName if null">
          <sch:rule abstract="true" id="CD-11">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@displayName))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no qualifier if null">
          <sch:rule abstract="true" id="CD-12">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(qualifier))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no source if null">
          <sch:rule abstract="true" id="CD-13">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@source))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="displayName" type="ST" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="qualifier" type="CR" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="group" type="CDGroup" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="translation" type="CD" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="source" type="XReference" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="code" type="xsd:string" use="optional" />
        <xsd:attribute name="codeSystem" type="Uid" use="optional" />
        <xsd:attribute name="codeSystemName" type="xsd:string" use="optional" />
        <xsd:attribute name="codeSystemVersion" type="xsd:string" use="optional" />
        <xsd:attribute name="valueSet" type="xsd:string" use="optional" />
        <xsd:attribute name="valueSetVersion" type="xsd:string" use="optional" />
        <xsd:attribute name="id" type="xsd:ID" use="optional" />
        <xsd:attribute name="codingRationale" type="set_CodingRationale" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CR">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value is required">
          <sch:rule abstract="true" id="CR-0">
            <sch:assert test="value" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on CR attributes">
          <sch:rule abstract="true" id="CR-1">
            <sch:assert test="count(*[self::name or self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no original text on qualifiers">
          <sch:rule abstract="true" id="CR-2">
            <sch:assert test="not value/originalText" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="name" type="CD.CV" minOccurs="0" maxOccurs="1" />
      <xsd:element name="value" type="CD" minOccurs="0" maxOccurs="1" />
    </xsd:sequence>
    <xsd:attribute name="inverted" type="xsd:boolean" default="false" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="CD.CV">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="CD.CV-0">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="CD.CE">
        <xsd:sequence>
          <xsd:element name="displayName" type="ST" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="qualifier" type="CR" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="group" type="CDGroup" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="translation" type="CD" minOccurs="0" maxOccurs="0" />
          <xsd:element name="source" type="XReference" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CD.CE">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no qualifiers">
          <sch:rule abstract="true" id="CD.CE-0">
            <sch:assert test="not(group) and not(qualifier)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="CD">
        <xsd:sequence>
          <xsd:element name="displayName" type="ST" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="qualifier" type="CR" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="group" type="CDGroup" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="translation" type="CD" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="source" type="XReference" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CDGroup">
    <xsd:sequence>
      <xsd:element name="qualifier" type="CR" minOccurs="0" maxOccurs="unbounded" />
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="XReference">
    <xsd:attribute name="xref" type="xsd:IDREF" use="required" />
  </xsd:complexType>
  <xsd:complexType name="SC.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="SC.NT-0">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="SC">
        <xsd:sequence>
          <xsd:element name="translation" type="ST" minOccurs="0" maxOccurs="0" />
          <xsd:element name="code" type="CD" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TEL.Email">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="email only">
          <sch:rule abstract="true" id="TEL.Email-0">
            <sch:assert test="starts-with(@value, &#34;mailto&#34;)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TEL.Person">
        <xsd:sequence>
          <xsd:element name="useablePeriod" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TEL.Person">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="Personal Address">
          <sch:rule abstract="true" id="TEL.Person-0">
            <sch:assert test="starts-with(@value, &#34;tel&#34;) or starts-with(@value, &#34;x-text-fax&#34;) or starts-with(@value, &#34;x-text-tel&#34;) or starts-with(@value, &#34;mailto&#34;)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TEL">
        <xsd:sequence>
          <xsd:element name="useablePeriod" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TEL.Phone">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="Phone">
          <sch:rule abstract="true" id="TEL.Phone-0">
            <sch:assert test="starts-with(@value, &#34;tel&#34;) or starts-with(@value, &#34;x-text-fax&#34;) or starts-with(@value, &#34;x-text-tel&#34;)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TEL.Person">
        <xsd:sequence>
          <xsd:element name="useablePeriod" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TEL.Url">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no use">
          <sch:rule abstract="true" id="TEL.Url-0">
            <sch:assert test="not(use)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="schemes">
          <sch:rule abstract="true" id="TEL.Url-1">
            <sch:assert test="(starts-with(@value, &#34;file&#34;) or starts-with(@value, &#34;ftp&#34;) or starts-with(@value, &#34;http&#34;) or starts-with(@value, &#34;https&#34;) or starts-with(@value, &#34;nfs&#34;))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TEL">
        <xsd:sequence>
          <xsd:element name="useablePeriod" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="use" type="TelecommunicationAddressUse" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="II">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="root is required">
          <sch:rule abstract="true" id="II-0">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @root)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no root if null">
          <sch:rule abstract="true" id="II-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@root))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no extension if null">
          <sch:rule abstract="true" id="II-2">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@extension))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no identifierName if null">
          <sch:rule abstract="true" id="II-3">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@identifierName))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no displayable if null">
          <sch:rule abstract="true" id="II-4">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@displayable))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no reliability if null">
          <sch:rule abstract="true" id="II-5">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@reliability))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:attribute name="root" type="Uid" use="optional" />
        <xsd:attribute name="extension" type="xsd:string" use="optional" />
        <xsd:attribute name="identifierName" type="xsd:string" use="optional" />
        <xsd:attribute name="displayable" type="xsd:boolean" use="optional" />
        <xsd:attribute name="scope" type="IdentifierScope" use="optional" />
        <xsd:attribute name="reliability" type="IdentifierReliability" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CD.CE.None">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no qualifiers">
          <sch:rule abstract="true" id="CD.CE.None-0">
            <sch:assert test="count(*[self::translation][qualifier])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="CD.CE">
        <xsd:sequence>
          <xsd:element name="displayName" type="ST" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="qualifier" type="CR" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="group" type="CDGroup" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="translation" type="CD.CE" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="source" type="XReference" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have a code or a value">
          <sch:rule abstract="true" id="CO-0">
            <sch:assert test="@nullFlavor or (@value or (code and not(code/@nullFlavor)))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="CO-1">
            <sch:assert test="count(*[self::code][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no value if null">
          <sch:rule abstract="true" id="CO-2">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@value))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no code if null">
          <sch:rule abstract="true" id="CO-3">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@code))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:sequence>
          <xsd:element name="code" type="CD" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QTY">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="language required">
          <sch:rule abstract="true" id="QTY-0">
            <sch:assert test="not(expression) or (expression/@nullFlavor) or (@expressionLanguage)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="uncertainty has type">
          <sch:rule abstract="true" id="QTY-1">
            <sch:assert test="not(uncertainty) or (@uncertaintyType)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QTY-2">
            <sch:assert test="count(*[self::originalText or self::uncertainty or self::expression][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="expressionLanguage" type="Code" use="optional" />
        <xsd:attribute name="uncertaintyType" type="UncertaintyType" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="CS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="code is required">
          <sch:rule abstract="true" id="CS-0">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @code)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no code if null">
          <sch:rule abstract="true" id="CS-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@code))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:attribute name="code" type="xsd:string" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="AD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or parts">
          <sch:rule abstract="true" id="AD-0">
            <sch:assert test="(@nullFlavor or part) and not(@nullFlavor and part)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no useablePeriod if null">"
          <sch:rule abstract="true" id="AD-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@useablePeriod))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on AD attributes">
          <sch:rule abstract="true" id="AD-2">
            <sch:assert test="count(*[self::useablePeriod][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="part" type="ADXP" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="useablePeriod" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="use" type="set_PostalAddressUse" use="optional" />
        <xsd:attribute name="isNotOrdered" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ADXP">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value is required">
          <sch:rule abstract="true" id="ADXP-0">
            <sch:assert test="string-length(@value) &#62; 0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="code requires codeSystem">
          <sch:rule abstract="true" id="ADXP-1">
            <sch:assert test="@codeSystem or not(@code)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="codeSystemVersion only if codeSystem">
          <sch:rule abstract="true" id="ADXP-2">
            <sch:assert test="@codeSystem or not(@codeSystemVersion)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:attribute name="value" type="xsd:string" use="optional" />
    <xsd:attribute name="code" type="xsd:string" use="optional" />
    <xsd:attribute name="codeSystem" type="xsd:string" use="optional" />
    <xsd:attribute name="codeSystemVersion" type="xsd:string" use="optional" />
    <xsd:attribute name="type" type="AddressPartType" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="EN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or parts">
          <sch:rule abstract="true" id="EN-0">
            <sch:assert test="(@nullFlavor or part) and not(@nullFlavor and part)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="part" type="ENXP" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="use" type="set_EntityNameUse" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ENXP">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value is required">
          <sch:rule abstract="true" id="ENXP-0">
            <sch:assert test="string-length(@value) &#62; 0" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="code requires codeSystem">
          <sch:rule abstract="true" id="ENXP-1">
            <sch:assert test="@codeSystem or not(@code)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="codeSystemVersion only if codeSystem">
          <sch:rule abstract="true" id="ENXP-2">
            <sch:assert test="@codeSystem or not(@codeSystemVersion)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:attribute name="value" type="xsd:string" use="optional" />
    <xsd:attribute name="code" type="xsd:string" use="optional" />
    <xsd:attribute name="codeSystem" type="xsd:string" use="optional" />
    <xsd:attribute name="codeSystemVersion" type="xsd:string" use="optional" />
    <xsd:attribute name="type" type="EntityNamePartType" use="optional" />
    <xsd:attribute name="qualifier" type="set_EntityNamePartQualifier" use="optional" />
  </xsd:complexType>
  <xsd:complexType name="EN.TN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="only one part with no type">
          <sch:rule abstract="true" id="EN.TN-0">
            <sch:assert test="@nullFlavor or (count(part) = 1 and not part/@type)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="EN" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EN.PN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no parts are qualified by LS">
          <sch:rule abstract="true" id="EN.PN-0">
            <sch:assert test="count(part[contains(@qualifier, &#39;LS&#39;)])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="EN" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EN.ON">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no parts are person types">
          <sch:rule abstract="true" id="EN.ON-0">
            <sch:assert test="count(part[type = &#39;FAM&#39; or type = &#39;GIV&#39;])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="EN" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or value">
          <sch:rule abstract="true" id="TS-0">
            <sch:assert test="(@nullFlavor or @value) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:attribute name="value" type="xsd:string" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="Date">
          <sch:rule abstract="true" id="TS.Date-0">
            <sch:assert test="not(contains(@value, &#34;+&#34;) or contains(@value, &#34;-&#34;)) and string-length(@value) &#60;= 8" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TS">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="Full Date">
          <sch:rule abstract="true" id="TS.Date.Full-0">
            <sch:assert test="string-length(@value) = 8" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TS.Date">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="DateTime">
          <sch:rule abstract="true" id="TS.DateTime-0">
            <sch:assert test="(string-length(@value) &#60;= 14) or ((contains(@value, &#34;+&#34;) or contains(@value, &#34;-&#34;)) and string-length(@value) &#60;= 19)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TS">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="Full DateTime">
          <sch:rule abstract="true" id="TS.DateTime.Full-0">
            <sch:assert test="string-length(@value) = 19 and (contains(@value, &#34;+&#34;) or contains(@value, &#34;-&#34;))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TS.DateTime">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="Birth">
          <sch:rule abstract="true" id="TS.Birth-0">
            <sch:assert test="((contains(@value, &#34;+&#34;) or contains(@value, &#34;-&#34;)) and string-length(@value) = 19) or (not(contains(@value, &#34;+&#34;) or contains(@value, &#34;-&#34;)) and (string-length(@value) = 8 or string-length(@value) = 4))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="TS">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="numerator and and denominator required">
          <sch:rule abstract="true" id="RTO-0">
            <sch:assert test="@nullFlavor or ((numerator and not(numerator/@nullFlavor)) and (numerator and not(numerator/@nullFlavor)))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on RTO Attributes">
          <sch:rule abstract="true" id="RTO-1">
            <sch:assert test="count(*[self::numerator or self::denominator][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:sequence>
          <xsd:element name="numerator" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="denominator" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or value">
          <sch:rule abstract="true" id="MO-0">
            <sch:assert test="(@nullFlavor or @value) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="null or currency">
          <sch:rule abstract="true" id="MO-1">
            <sch:assert test="(@nullFlavor or @currency) and not(@nullFlavor and @currency)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no precision if null">
          <sch:rule abstract="true" id="MO-2">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@precision))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:attribute name="value" type="xsd:double" use="optional" />
        <xsd:attribute name="precision" type="xsd:int" use="optional" />
        <xsd:attribute name="currency" type="Code" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or value">
          <sch:rule abstract="true" id="PQ-0">
            <sch:assert test="(@nullFlavor or @value) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no precision if null">
          <sch:rule abstract="true" id="PQ-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@precision))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no translation if null">
          <sch:rule abstract="true" id="PQ-2">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@translation))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:sequence>
          <xsd:element name="translation" type="PQR" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="value" type="xsd:double" use="optional" />
        <xsd:attribute name="precision" type="xsd:int" default="0" use="optional" />
        <xsd:attribute name="unit" type="Code" use="optional" />
        <xsd:attribute name="codingRationale" type="set_CodingRationale" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PQR">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or value">
          <sch:rule abstract="true" id="PQR-0">
            <sch:assert test="(@nullFlavor or @value) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="PQR-1">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no qualifiers">
          <sch:rule abstract="true" id="PQR-2">
            <sch:assert test="not(group) and not(qualifier)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PQR">
          <sch:rule abstract="true" id="PQR-3">
            <sch:assert test="not(@validTimeLow) and not(@validTimeHigh) and not(@controlActRoot) and not(@controlActExtension) and not(@updateMode)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no precision if null">
          <sch:rule abstract="true" id="PQR-4">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@precision))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="CD">
        <xsd:attribute name="value" type="xsd:double" use="optional" />
        <xsd:attribute name="precision" type="xsd:int" default="0" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="no translations">
          <sch:rule abstract="true" id="PQ.Time-0">
            <sch:assert test="not(translation)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="PQ">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="translation" type="PQR" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or value">
          <sch:rule abstract="true" id="REAL-0">
            <sch:assert test="(@nullFlavor or @value) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no precision if null">
          <sch:rule abstract="true" id="REAL-1">
            <sch:assert test="not(@nullFlavor) or (@nullFlavor and not(@precision))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:attribute name="value" type="xsd:double" use="optional" />
        <xsd:attribute name="precision" type="xsd:int" default="0" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or value">
          <sch:rule abstract="true" id="INT-0">
            <sch:assert test="(@nullFlavor or @value) and not(@nullFlavor and @value)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QTY">
        <xsd:attribute name="value" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not negative">
          <sch:rule abstract="true" id="INT.NonNeg-0">
            <sch:assert test="@value &#62;= 0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="INT">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="positive">
          <sch:rule abstract="true" id="INT.Positive-0">
            <sch:assert test="@value &#62; 0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="expression" type="ED" minOccurs="0" maxOccurs="1" />
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="uncertainty" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_BL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_BL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_BL-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_BL">
        <xsd:sequence>
          <xsd:element name="item" type="BL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_BL">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_BL.NonNull">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_BL.NonNull-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_BL.NonNull-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_BL.NonNull">
        <xsd:sequence>
          <xsd:element name="item" type="BL.NonNull" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_BL.NonNull">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED">
        <xsd:sequence>
          <xsd:element name="item" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Image">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Image-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Image-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Image">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Image" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Image">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Text">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Text-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Text-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Text">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Text" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Text">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Doc">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Doc-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Doc-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Doc">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Doc">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Doc.Ref">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Doc.Ref-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Doc.Ref-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Doc.Ref">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc.Ref" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Doc.Ref">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Doc.Inline">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Doc.Inline-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Doc.Inline-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Doc.Inline">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc.Inline" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Doc.Inline">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Signature">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Signature-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Signature-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Signature">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Signature" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Signature">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ED.Narrative">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ED.Narrative-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ED.Narrative-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Narrative">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Narrative" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ED.Narrative">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ST">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ST-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ST-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ST">
        <xsd:sequence>
          <xsd:element name="item" type="ST" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ST">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_ST.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_ST.NT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_ST.NT-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ST.NT">
        <xsd:sequence>
          <xsd:element name="item" type="ST.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_ST.NT">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_SC">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_SC-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_SC-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_SC">
        <xsd:sequence>
          <xsd:element name="item" type="SC" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_SC">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_SC.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_SC.NT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_SC.NT-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_SC.NT">
        <xsd:sequence>
          <xsd:element name="item" type="SC.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_SC.NT">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TEL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TEL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TEL-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL">
        <xsd:sequence>
          <xsd:element name="item" type="TEL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TEL">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TEL.Email">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TEL.Email-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TEL.Email-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Email">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Email" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TEL.Email">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TEL.Person">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TEL.Person-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TEL.Person-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Person">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Person" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TEL.Person">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TEL.Phone">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TEL.Phone-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TEL.Phone-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Phone">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Phone" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TEL.Phone">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TEL.Url">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TEL.Url-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TEL.Url-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Url">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Url" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TEL.Url">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_II">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_II-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_II-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_II">
        <xsd:sequence>
          <xsd:element name="item" type="II" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_II">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_CD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_CD-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_CD-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD">
        <xsd:sequence>
          <xsd:element name="item" type="CD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_CD">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_CD.CE">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_CD.CE-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_CD.CE-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD.CE">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CE" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_CD.CE">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_CD.CE.None">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_CD.CE.None-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_CD.CE.None-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD.CE.None">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CE.None" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_CD.CE.None">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_CD.CV">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_CD.CV-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_CD.CV-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD.CV">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CV" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_CD.CV">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_CO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_CO-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CO">
        <xsd:sequence>
          <xsd:element name="item" type="CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_CO">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_CS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_CS-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_CS-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CS">
        <xsd:sequence>
          <xsd:element name="item" type="CS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_CS">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_AD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_AD-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_AD-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_AD">
        <xsd:sequence>
          <xsd:element name="item" type="AD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_AD">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_EN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_EN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_EN-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN">
        <xsd:sequence>
          <xsd:element name="item" type="EN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_EN">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_EN.TN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_EN.TN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_EN.TN-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN.TN">
        <xsd:sequence>
          <xsd:element name="item" type="EN.TN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_EN.TN">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_EN.PN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_EN.PN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_EN.PN-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN.PN">
        <xsd:sequence>
          <xsd:element name="item" type="EN.PN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_EN.PN">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_EN.ON">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_EN.ON-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_EN.ON-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN.ON">
        <xsd:sequence>
          <xsd:element name="item" type="EN.ON" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_EN.ON">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TS-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TS-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS">
        <xsd:sequence>
          <xsd:element name="item" type="TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TS">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TS.Date-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TS.Date-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.Date">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TS.Date">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TS.Date.Full-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TS.Date.Full-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TS.Date.Full">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TS.DateTime-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TS.DateTime-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="item" type="TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TS.DateTime">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TS.DateTime.Full-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TS.DateTime.Full-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="item" type="TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TS.DateTime.Full">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_TS.Birth-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_TS.Birth-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.Birth">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_TS.Birth">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_RTO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_RTO-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_RTO">
        <xsd:sequence>
          <xsd:element name="item" type="RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_RTO">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_MO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_MO-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_MO">
        <xsd:sequence>
          <xsd:element name="item" type="MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_MO">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_PQ-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_PQ-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_PQ">
        <xsd:sequence>
          <xsd:element name="item" type="PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_PQ">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_PQ.Time-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_PQ.Time-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_PQ.Time">
        <xsd:sequence>
          <xsd:element name="item" type="PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_PQ.Time">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_REAL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_REAL-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_REAL">
        <xsd:sequence>
          <xsd:element name="item" type="REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_REAL">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_INT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_INT-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_INT">
        <xsd:sequence>
          <xsd:element name="item" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_INT">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_INT.NonNeg-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_INT.NonNeg-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="item" type="INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_INT.NonNeg">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DSET_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="DSET_INT.Positive-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no null members">
          <sch:rule abstract="true" id="DSET_INT.Positive-1">
            <sch:assert test="@nullFlavor or not(item\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_INT.Positive">
        <xsd:sequence>
          <xsd:element name="item" type="INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="COLL_INT.Positive">
    <xsd:complexContent>
      <xsd:extension base="ANY" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_BL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_BL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_BL">
        <xsd:sequence>
          <xsd:element name="item" type="BL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_BL.NonNull">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_BL.NonNull-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_BL.NonNull">
        <xsd:sequence>
          <xsd:element name="item" type="BL.NonNull" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED">
        <xsd:sequence>
          <xsd:element name="item" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Image">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Image-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Image">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Image" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Text">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Text-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Text">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Text" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Doc">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Doc-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Doc">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Doc.Ref">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Doc.Ref-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Doc.Ref">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc.Ref" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Doc.Inline">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Doc.Inline-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Doc.Inline">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc.Inline" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Signature">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Signature-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Signature">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Signature" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ED.Narrative">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ED.Narrative-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ED.Narrative">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Narrative" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ST">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ST-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ST">
        <xsd:sequence>
          <xsd:element name="item" type="ST" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_ST.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_ST.NT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_ST.NT">
        <xsd:sequence>
          <xsd:element name="item" type="ST.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_SC">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_SC-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_SC">
        <xsd:sequence>
          <xsd:element name="item" type="SC" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_SC.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_SC.NT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_SC.NT">
        <xsd:sequence>
          <xsd:element name="item" type="SC.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TEL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TEL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL">
        <xsd:sequence>
          <xsd:element name="item" type="TEL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TEL.Email">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TEL.Email-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Email">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Email" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TEL.Person">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TEL.Person-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Person">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Person" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TEL.Phone">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TEL.Phone-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Phone">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Phone" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TEL.Url">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TEL.Url-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TEL.Url">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Url" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_II">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_II-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_II">
        <xsd:sequence>
          <xsd:element name="item" type="II" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_CD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_CD-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD">
        <xsd:sequence>
          <xsd:element name="item" type="CD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_CD.CE">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_CD.CE-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD.CE">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CE" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_CD.CE.None">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_CD.CE.None-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD.CE.None">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CE.None" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_CD.CV">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_CD.CV-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CD.CV">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CV" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_CO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CO">
        <xsd:sequence>
          <xsd:element name="item" type="CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_CS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_CS-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_CS">
        <xsd:sequence>
          <xsd:element name="item" type="CS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_AD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_AD-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_AD">
        <xsd:sequence>
          <xsd:element name="item" type="AD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_EN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_EN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN">
        <xsd:sequence>
          <xsd:element name="item" type="EN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_EN.TN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_EN.TN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN.TN">
        <xsd:sequence>
          <xsd:element name="item" type="EN.TN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_EN.PN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_EN.PN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN.PN">
        <xsd:sequence>
          <xsd:element name="item" type="EN.PN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_EN.ON">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_EN.ON-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_EN.ON">
        <xsd:sequence>
          <xsd:element name="item" type="EN.ON" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TS-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS">
        <xsd:sequence>
          <xsd:element name="item" type="TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TS.Date-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.Date">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TS.Date.Full-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TS.DateTime-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="item" type="TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TS.DateTime.Full-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="item" type="TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_TS.Birth-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_TS.Birth">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_RTO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_RTO">
        <xsd:sequence>
          <xsd:element name="item" type="RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_MO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_MO">
        <xsd:sequence>
          <xsd:element name="item" type="MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_PQ-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_PQ">
        <xsd:sequence>
          <xsd:element name="item" type="PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_PQ.Time-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_PQ.Time">
        <xsd:sequence>
          <xsd:element name="item" type="PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_REAL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_REAL">
        <xsd:sequence>
          <xsd:element name="item" type="REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_INT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_INT">
        <xsd:sequence>
          <xsd:element name="item" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_INT.NonNeg-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="item" type="INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BAG_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="null or not empty">
          <sch:rule abstract="true" id="BAG_INT.Positive-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="COLL_INT.Positive">
        <xsd:sequence>
          <xsd:element name="item" type="INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_BL">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="BL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_BL.NonNull">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="BL.NonNull" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Image">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Image" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Text">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Text" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Doc">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Doc.Ref">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc.Ref" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Doc.Inline">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Doc.Inline" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Signature">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Signature" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ED.Narrative">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ED.Narrative" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ST">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ST" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_ST.NT">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="ST.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_SC">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="SC" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_SC.NT">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="SC.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TEL">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TEL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TEL.Email">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Email" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TEL.Person">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Person" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TEL.Phone">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Phone" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TEL.Url">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TEL.Url" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_II">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="II" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_CD">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="CD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_CD.CE">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CE" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_CD.CE.None">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CE.None" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_CD.CV">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="CD.CV" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_CO">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_CS">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="CS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_AD">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="AD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_EN">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="EN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_EN.TN">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="EN.TN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_EN.PN">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="EN.PN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_EN.ON">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="EN.ON" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TS">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TS.Date">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TS.Date.Full">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TS.DateTime">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TS.DateTime.Full">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_TS.Birth">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_RTO">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_MO">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_PQ">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_PQ.Time">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_REAL">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_INT">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_INT.NonNeg">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LIST_INT.Positive">
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_CO-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_CO-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_CO-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_CO">
        <xsd:sequence>
          <xsd:element name="low" type="CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_CO-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_TS-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_TS-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_TS-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="low" type="TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_TS.Date-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_TS.Date-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_TS.Date-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="low" type="TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_TS.Date-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_TS.Date.Full-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_TS.Date.Full-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_TS.Date.Full-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="low" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_TS.Date.Full-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_TS.DateTime-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_TS.DateTime-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_TS.DateTime-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="low" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_TS.DateTime-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_TS.DateTime.Full-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_TS.DateTime.Full-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_TS.DateTime.Full-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="low" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_TS.DateTime.Full-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_TS.Birth-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_TS.Birth-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_TS.Birth-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="low" type="TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_TS.Birth-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_RTO-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_RTO-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_RTO-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_RTO">
        <xsd:sequence>
          <xsd:element name="low" type="RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_RTO-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_MO-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_MO-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_MO-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_MO">
        <xsd:sequence>
          <xsd:element name="low" type="MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_MO-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_PQ-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_PQ-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_PQ-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ">
        <xsd:sequence>
          <xsd:element name="low" type="PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_PQ-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_PQ.Time-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_PQ.Time-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_PQ.Time-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ.Time">
        <xsd:sequence>
          <xsd:element name="low" type="PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_PQ.Time-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_REAL-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_REAL-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_REAL-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_REAL">
        <xsd:sequence>
          <xsd:element name="low" type="REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_REAL-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_INT-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_INT-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_INT-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT">
        <xsd:sequence>
          <xsd:element name="low" type="INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_INT-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_INT.NonNeg-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_INT.NonNeg-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_INT.NonNeg-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="low" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_INT.NonNeg-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="IVL_INT.Positive-0">
            <sch:assert test="(@nullFlavor and not(high or low or width)) or (not(@nullFlavor or width) and (high or low)) or (not(@nullFlavor or high or low) and width)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="closed attributes only if limited">
          <sch:rule abstract="true" id="IVL_INT.Positive-1">
            <sch:assert test="not(low and @lowClosed) and not(high and @highClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on IVL attributes">
          <sch:rule abstract="true" id="IVL_INT.Positive-2">
            <sch:assert test="count(*[self::low or self::high or self::width][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.Positive">
        <xsd:sequence>
          <xsd:element name="low" type="INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="optional" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="QSET_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="QSET_INT.Positive-0">
            <sch:assert test="count(*[self::originalText][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_CO-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_CO-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_CO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="CO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_TS-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_TS-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_TS.Date-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_TS.Date-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Date">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.Date" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_TS.Date.Full-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_TS.Date.Full-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.Date.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_TS.DateTime-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_TS.DateTime-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.DateTime" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_TS.DateTime.Full-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_TS.DateTime.Full-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.DateTime.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_TS.Birth-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_TS.Birth-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Birth">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="TS.Birth" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_RTO-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_RTO-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_RTO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="RTO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_MO-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_MO-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_MO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="MO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_PQ-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_PQ-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_PQ">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="PQ" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_PQ.Time-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_PQ.Time-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_PQ.Time">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="PQ.Time" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_REAL-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_REAL-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_REAL">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="REAL" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_INT-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_INT-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="INT" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_INT.NonNeg-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_INT.NonNeg-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="INT.NonNeg" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Low_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Low_INT.Positive-0">
            <sch:assert test="low and not(low\@nullFlavor) and (@lowClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Low_INT.Positive-1">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT.Positive">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="high" type="INT.Positive" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_CO-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_CO-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_CO-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_CO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="CO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="CO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_TS-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_TS-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_TS-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_TS.Date-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_TS.Date-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_TS.Date-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Date">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Date" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.Date" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_TS.Date.Full-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_TS.Date.Full-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_TS.Date.Full-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Date.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.Date.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_TS.DateTime-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_TS.DateTime-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_TS.DateTime-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.DateTime" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.DateTime" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_TS.DateTime.Full-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_TS.DateTime.Full-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_TS.DateTime.Full-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.DateTime.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.DateTime.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_TS.Birth-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_TS.Birth-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_TS.Birth-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Birth">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Birth" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.Birth" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_RTO-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_RTO-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_RTO-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_RTO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="RTO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="RTO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_MO-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_MO-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_MO-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_MO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="MO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="MO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_PQ-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_PQ-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_PQ-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_PQ">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="PQ" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="PQ" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_PQ.Time-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_PQ.Time-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_PQ.Time-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_PQ.Time">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="PQ.Time" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="PQ.Time" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_REAL-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_REAL-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_REAL-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_REAL">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="REAL" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="REAL" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_INT-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_INT-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_INT-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="INT" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_INT.NonNeg-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_INT.NonNeg-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_INT.NonNeg-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT.NonNeg" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="INT.NonNeg" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.Width_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="width">
          <sch:rule abstract="true" id="IVL.Width_INT.Positive-0">
            <sch:assert test="width and not(width\@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.Width_INT.Positive-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.Width_INT.Positive-2">
            <sch:assert test="not(high) and not(@highClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT.Positive">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT.Positive" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="INT.Positive" minOccurs="0" maxOccurs="0" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
        <xsd:attribute name="highClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_CO-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_CO-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_CO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="CO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_TS-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_TS-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_TS.Date-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_TS.Date-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Date">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Date" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_TS.Date.Full-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_TS.Date.Full-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Date.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_TS.DateTime-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_TS.DateTime-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.DateTime" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_TS.DateTime.Full-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_TS.DateTime.Full-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.DateTime.Full" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_TS.Birth-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_TS.Birth-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_TS.Birth">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="TS.Birth" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_RTO-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_RTO-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_RTO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="RTO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_MO-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_MO-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_MO">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="MO" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_PQ-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_PQ-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_PQ">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="PQ" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_PQ.Time-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_PQ.Time-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_PQ.Time">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="PQ.Time" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_REAL-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_REAL-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_REAL">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="REAL" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_INT-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_INT-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_INT.NonNeg-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_INT.NonNeg-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT.NonNeg" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IVL.High_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="high">
          <sch:rule abstract="true" id="IVL.High_INT.Positive-0">
            <sch:assert test="high and not(high\@nullFlavor) and (@highClosed = &#34;true&#34;)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="low">
          <sch:rule abstract="true" id="IVL.High_INT.Positive-1">
            <sch:assert test="not(low) and not(@lowClosed)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="IVL_INT.Positive">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="low" type="INT.Positive" minOccurs="0" maxOccurs="0" />
          <xsd:element name="high" type="INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="width" type="QTY" minOccurs="0" maxOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="lowClosed" type="xsd:boolean" use="prohibited" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_CO-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_CO-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_TS-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_TS-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_TS.Date-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_TS.Date-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_TS.Date.Full-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_TS.DateTime-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_TS.DateTime-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_TS.DateTime.Full-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_TS.Birth-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_TS.Birth-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_RTO-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_RTO-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_MO-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_MO-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_PQ-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_PQ-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_PQ.Time-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_PQ.Time-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_REAL-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_REAL-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_INT-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_INT-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_INT.NonNeg-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SLIST_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="SLIST_INT.Positive-0">
            <sch:assert test="@nullFlavor or (origin and not(origin\@nullFlavor) and count(*[digits\not(@nullFlavor))&#62;0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on SLIST attributes">
          <sch:rule abstract="true" id="SLIST_INT.Positive-1">
            <sch:assert test="count(*[self::origin or self::scale or self::digits][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="origin" type="INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="scale" type="QTY" minOccurs="0" maxOccurs="1" />
          <xsd:element name="digit" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_CO-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_CO-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_CO-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_TS-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_TS-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_TS-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_TS.Date-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_TS.Date-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_TS.Date-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_TS.Date.Full-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_TS.Date.Full-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_TS.DateTime-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_TS.DateTime-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_TS.DateTime-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_TS.DateTime.Full-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_TS.DateTime.Full-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_TS.Birth-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_TS.Birth-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_TS.Birth-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_RTO-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_RTO-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_RTO-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_MO-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_MO-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_MO-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_PQ-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_PQ-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_PQ-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_PQ.Time-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_PQ.Time-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_PQ.Time-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_REAL-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_REAL-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_REAL-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_INT-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_INT-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_INT-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_INT.NonNeg-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_INT.NonNeg-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GLIST_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="GLIST_INT.Positive-0">
            <sch:assert test="@nullFlavor or (head and not(head\@nullFlavor) and increment and not(increment\@nullFlavor) and @denominator)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="denominator must be positive">
          <sch:rule abstract="true" id="GLIST_INT.Positive-1">
            <sch:assert test="not(@denominator) or (@denominator &#62; 0)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on GLIST attributes">
          <sch:rule abstract="true" id="GLIST_INT.Positive-2">
            <sch:assert test="count(*[self::head or self::increment][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="head" type="INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="increment" type="QTY" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="denominator" type="xsd:int" use="optional" />
        <xsd:attribute name="period" type="xsd:int" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_CO-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_CO">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_CO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_TS-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_TS.Date-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.Date" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.Date.Full" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_TS.DateTime-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.DateTime" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_TS.Birth-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.Birth" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_RTO-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_RTO">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_RTO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_MO-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_MO">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_MO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_PQ-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_PQ.Time-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ.Time">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_PQ.Time" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_REAL-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_REAL">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_REAL" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_INT-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_INT" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_INT.NonNeg" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSD_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSD_INT.Positive-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.Positive">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_INT.Positive" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_CO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_CO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_CO">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_TS-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_TS-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_TS.Date-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_TS.Date-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_TS.Date.Full-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_TS.DateTime-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_TS.DateTime-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_TS.DateTime.Full-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_TS.Birth-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_TS.Birth-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_RTO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_RTO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_RTO">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_MO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_MO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_MO">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_PQ-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_PQ-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_PQ.Time-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_PQ.Time-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ.Time">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_REAL-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_REAL-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_REAL">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_INT-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_INT-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_INT.NonNeg-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSI_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSI_INT.Positive-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSI_INT.Positive-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.Positive">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_CO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_CO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_CO">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_TS-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_TS-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_TS.Date-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_TS.Date-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_TS.Date.Full-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_TS.DateTime-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_TS.DateTime-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_TS.DateTime.Full-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_TS.Birth-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_TS.Birth-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_RTO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_RTO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_RTO">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_MO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_MO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_MO">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_PQ-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_PQ-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_PQ.Time-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_PQ.Time-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ.Time">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_REAL-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_REAL-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_REAL">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_INT-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_INT-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_INT.NonNeg-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSU_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSU_INT.Positive-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSU_INT.Positive-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 2)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.Positive">
        <xsd:sequence>
          <xsd:element name="term" type="QSET_INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_CO-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_CO">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_CO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_CO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_TS-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_TS.Date-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.Date" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.Date.Full" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_TS.DateTime-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.DateTime" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_TS.Birth-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_TS.Birth" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_RTO-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_RTO">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_RTO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_RTO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_MO-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_MO">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_MO" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_MO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_PQ-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_PQ" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_PQ.Time-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ.Time">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_PQ.Time" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_PQ.Time" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_REAL-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_REAL">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_REAL" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_REAL" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_INT-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_INT" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_INT" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_INT.NonNeg" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_INT.NonNeg" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSP_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSP_INT.Positive-0">
            <sch:assert test="@nullFlavor or (not(first/@nullFlavor) and not(second/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.Positive">
        <xsd:sequence>
          <xsd:element name="first" type="QSET_INT.Positive" minOccurs="0" maxOccurs="1" />
          <xsd:element name="second" type="QSET_INT.Positive" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_CO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_CO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_CO">
        <xsd:sequence>
          <xsd:element name="term" type="CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_TS-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_TS-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="term" type="TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_TS.Date-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_TS.Date-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="term" type="TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_TS.Date.Full-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="term" type="TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_TS.DateTime-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_TS.DateTime-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="term" type="TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_TS.DateTime.Full-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="term" type="TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_TS.Birth-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_TS.Birth-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="term" type="TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_RTO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_RTO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_RTO">
        <xsd:sequence>
          <xsd:element name="term" type="RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_MO-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_MO-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_MO">
        <xsd:sequence>
          <xsd:element name="term" type="MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_PQ-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_PQ-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ">
        <xsd:sequence>
          <xsd:element name="term" type="PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_PQ.Time-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_PQ.Time-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_PQ.Time">
        <xsd:sequence>
          <xsd:element name="term" type="PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_REAL-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_REAL-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_REAL">
        <xsd:sequence>
          <xsd:element name="term" type="REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_INT-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_INT-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT">
        <xsd:sequence>
          <xsd:element name="term" type="INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_INT.NonNeg-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.NonNeg">
        <xsd:sequence>
          <xsd:element name="term" type="INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSS_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="not null">
          <sch:rule abstract="true" id="QSS_INT.Positive-0">
            <sch:assert test="@nullFlavor or not(terms/@nullFlavor)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="size">
          <sch:rule abstract="true" id="QSS_INT.Positive-1">
            <sch:assert test="@nullFlavor or (count(*[self::terms]) &#62;= 1)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_INT.Positive">
        <xsd:sequence>
          <xsd:element name="term" type="INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PIVL_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="PIVL_TS-0">
            <sch:assert test="@nullFlavor or ((phase and not(period\@nullFlavor) and (phase and not(period\@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PIVL attributes">
          <sch:rule abstract="true" id="PIVL_TS-1">
            <sch:assert test="count(*[self::phase or self::period][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="phase" type="IVL_TS" minOccurs="0" maxOccurs="1" />
          <xsd:element name="period" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="alignment" type="CalendarCycle" use="optional" />
        <xsd:attribute name="institutionSpecified" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PIVL_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="PIVL_TS.Date-0">
            <sch:assert test="@nullFlavor or ((phase and not(period\@nullFlavor) and (phase and not(period\@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PIVL attributes">
          <sch:rule abstract="true" id="PIVL_TS.Date-1">
            <sch:assert test="count(*[self::phase or self::period][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="phase" type="IVL_TS.Date" minOccurs="0" maxOccurs="1" />
          <xsd:element name="period" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="alignment" type="CalendarCycle" use="optional" />
        <xsd:attribute name="institutionSpecified" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PIVL_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="PIVL_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or ((phase and not(period\@nullFlavor) and (phase and not(period\@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PIVL attributes">
          <sch:rule abstract="true" id="PIVL_TS.Date.Full-1">
            <sch:assert test="count(*[self::phase or self::period][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="phase" type="IVL_TS.Date.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="period" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="alignment" type="CalendarCycle" use="optional" />
        <xsd:attribute name="institutionSpecified" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PIVL_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="PIVL_TS.DateTime-0">
            <sch:assert test="@nullFlavor or ((phase and not(period\@nullFlavor) and (phase and not(period\@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PIVL attributes">
          <sch:rule abstract="true" id="PIVL_TS.DateTime-1">
            <sch:assert test="count(*[self::phase or self::period][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="phase" type="IVL_TS.DateTime" minOccurs="0" maxOccurs="1" />
          <xsd:element name="period" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="alignment" type="CalendarCycle" use="optional" />
        <xsd:attribute name="institutionSpecified" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PIVL_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="PIVL_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or ((phase and not(period\@nullFlavor) and (phase and not(period\@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PIVL attributes">
          <sch:rule abstract="true" id="PIVL_TS.DateTime.Full-1">
            <sch:assert test="count(*[self::phase or self::period][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="phase" type="IVL_TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
          <xsd:element name="period" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="alignment" type="CalendarCycle" use="optional" />
        <xsd:attribute name="institutionSpecified" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PIVL_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="PIVL_TS.Birth-0">
            <sch:assert test="@nullFlavor or ((phase and not(period\@nullFlavor) and (phase and not(period\@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on PIVL attributes">
          <sch:rule abstract="true" id="PIVL_TS.Birth-1">
            <sch:assert test="count(*[self::phase or self::period][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="phase" type="IVL_TS.Birth" minOccurs="0" maxOccurs="1" />
          <xsd:element name="period" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="alignment" type="CalendarCycle" use="optional" />
        <xsd:attribute name="institutionSpecified" type="xsd:boolean" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EIVL_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="EIVL_TS-0">
            <sch:assert test="@nullFlavor or (event)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on EIVL attributes">
          <sch:rule abstract="true" id="EIVL_TS-1">
            <sch:assert test="count(*[self::offset][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS">
        <xsd:sequence>
          <xsd:element name="offset" type="IVL_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="event" type="TimingEvent" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EIVL_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="EIVL_TS.Date-0">
            <sch:assert test="@nullFlavor or (event)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on EIVL attributes">
          <sch:rule abstract="true" id="EIVL_TS.Date-1">
            <sch:assert test="count(*[self::offset][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date">
        <xsd:sequence>
          <xsd:element name="offset" type="IVL_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="event" type="TimingEvent" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EIVL_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="EIVL_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or (event)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on EIVL attributes">
          <sch:rule abstract="true" id="EIVL_TS.Date.Full-1">
            <sch:assert test="count(*[self::offset][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Date.Full">
        <xsd:sequence>
          <xsd:element name="offset" type="IVL_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="event" type="TimingEvent" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EIVL_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="EIVL_TS.DateTime-0">
            <sch:assert test="@nullFlavor or (event)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on EIVL attributes">
          <sch:rule abstract="true" id="EIVL_TS.DateTime-1">
            <sch:assert test="count(*[self::offset][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime">
        <xsd:sequence>
          <xsd:element name="offset" type="IVL_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="event" type="TimingEvent" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EIVL_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="EIVL_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or (event)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on EIVL attributes">
          <sch:rule abstract="true" id="EIVL_TS.DateTime.Full-1">
            <sch:assert test="count(*[self::offset][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.DateTime.Full">
        <xsd:sequence>
          <xsd:element name="offset" type="IVL_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="event" type="TimingEvent" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EIVL_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="required attributes">
          <sch:rule abstract="true" id="EIVL_TS.Birth-0">
            <sch:assert test="@nullFlavor or (event)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="no updateMode or History on EIVL attributes">
          <sch:rule abstract="true" id="EIVL_TS.Birth-1">
            <sch:assert test="count(*[self::offset][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="QSET_TS.Birth">
        <xsd:sequence>
          <xsd:element name="offset" type="IVL_PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="event" type="TimingEvent" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_BL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_BL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_BL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_BL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_BL-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_BL-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_BL-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_BL-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="BL" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_BL.NonNull">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_BL.NonNull-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_BL.NonNull" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_BL.NonNull">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_BL.NonNull-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_BL.NonNull-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_BL.NonNull-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_BL.NonNull-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="BL.NonNull" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Image">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Image-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Image" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Image">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Image-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Image-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Image-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Image-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Image" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Text">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Text-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Text" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Text">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Text-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Text-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Text-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Text-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Text" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Doc">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Doc-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Doc" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Doc">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Doc-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Doc-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Doc-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Doc-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Doc" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Doc.Ref">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Doc.Ref-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Doc.Ref" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Doc.Ref">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Doc.Ref-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Doc.Ref-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Doc.Ref-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Doc.Ref-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Doc.Ref" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Doc.Inline">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Doc.Inline-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Doc.Inline" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Doc.Inline">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Doc.Inline-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Doc.Inline-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Doc.Inline-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Doc.Inline-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Doc.Inline" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Signature">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Signature-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Signature" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Signature">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Signature-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Signature-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Signature-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Signature-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Signature" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ED.Narrative">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ED.Narrative-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ED.Narrative" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ED.Narrative">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ED.Narrative-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ED.Narrative-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ED.Narrative-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ED.Narrative-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ED.Narrative" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ST">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ST-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ST" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ST">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ST-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ST-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ST-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ST-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ST" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_ST.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_ST.NT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_ST.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_ST.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_ST.NT-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_ST.NT-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_ST.NT-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_ST.NT-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="ST.NT" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_SC">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_SC-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_SC" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_SC">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_SC-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_SC-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_SC-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_SC-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="SC" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_SC.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_SC.NT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_SC.NT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_SC.NT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_SC.NT-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_SC.NT-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_SC.NT-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_SC.NT-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="SC.NT" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TEL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TEL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TEL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TEL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TEL-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TEL-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TEL-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TEL-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TEL" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TEL.Email">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TEL.Email-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TEL.Email" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TEL.Email">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TEL.Email-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TEL.Email-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TEL.Email-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TEL.Email-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TEL.Email" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TEL.Person">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TEL.Person-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TEL.Person" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TEL.Person">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TEL.Person-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TEL.Person-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TEL.Person-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TEL.Person-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TEL.Person" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TEL.Phone">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TEL.Phone-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TEL.Phone" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TEL.Phone">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TEL.Phone-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TEL.Phone-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TEL.Phone-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TEL.Phone-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TEL.Phone" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TEL.Url">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TEL.Url-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TEL.Url" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TEL.Url">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TEL.Url-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TEL.Url-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TEL.Url-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TEL.Url-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TEL.Url" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_II">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_II-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_II" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_II">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_II-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_II-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_II-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_II-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="II" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_CD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_CD-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_CD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_CD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_CD-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_CD-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_CD-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_CD-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="CD" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_CD.CE">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_CD.CE-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_CD.CE" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_CD.CE">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_CD.CE-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_CD.CE-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_CD.CE-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_CD.CE-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="CD.CE" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_CD.CE.None">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_CD.CE.None-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_CD.CE.None" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_CD.CE.None">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_CD.CE.None-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_CD.CE.None-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_CD.CE.None-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_CD.CE.None-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="CD.CE.None" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_CD.CV">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_CD.CV-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_CD.CV" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_CD.CV">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_CD.CV-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_CD.CV-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_CD.CV-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_CD.CV-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="CD.CV" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_CO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_CO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_CO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_CO-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_CO-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_CO-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_CO-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="CO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_CS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_CS-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_CS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_CS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_CS-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_CS-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_CS-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_CS-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="CS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_AD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_AD-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_AD" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_AD">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_AD-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_AD-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_AD-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_AD-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="AD" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_EN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_EN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_EN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_EN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_EN-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_EN-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_EN-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_EN-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="EN" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_EN.TN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_EN.TN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_EN.TN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_EN.TN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_EN.TN-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_EN.TN-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_EN.TN-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_EN.TN-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="EN.TN" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_EN.PN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_EN.PN-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_EN.PN" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_EN.PN">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_EN.PN-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_EN.PN-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_EN.PN-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_EN.PN-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="EN.PN" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_EN.ON">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_EN.ON-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_EN.ON" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_EN.ON">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_EN.ON-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_EN.ON-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_EN.ON-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_EN.ON-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="EN.ON" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TS-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TS">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TS-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TS-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TS-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TS-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TS" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TS.Date-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TS.Date" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TS.Date">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TS.Date-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TS.Date-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TS.Date-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TS.Date-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TS.Date" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TS.Date.Full-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TS.Date.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TS.Date.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TS.Date.Full-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TS.Date.Full-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TS.Date.Full-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TS.Date.Full-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TS.Date.Full" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TS.DateTime-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TS.DateTime" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TS.DateTime">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TS.DateTime-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TS.DateTime-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TS.DateTime-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TS.DateTime-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TS.DateTime" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TS.DateTime.Full-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TS.DateTime.Full" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TS.DateTime.Full">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TS.DateTime.Full-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TS.DateTime.Full-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TS.DateTime.Full-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TS.DateTime.Full-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TS.DateTime.Full" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_TS.Birth-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_TS.Birth" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_TS.Birth">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_TS.Birth-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_TS.Birth-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_TS.Birth-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_TS.Birth-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="TS.Birth" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_RTO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_RTO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_RTO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_RTO-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_RTO-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_RTO-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_RTO-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="RTO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_MO-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_MO" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_MO">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_MO-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_MO-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_MO-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_MO-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="MO" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_PQ-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_PQ" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_PQ">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_PQ-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_PQ-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_PQ-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_PQ-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="PQ" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_PQ.Time-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_PQ.Time" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_PQ.Time">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_PQ.Time-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_PQ.Time-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_PQ.Time-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_PQ.Time-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="PQ.Time" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_REAL-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_REAL" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_REAL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_REAL-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_REAL-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_REAL-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_REAL-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="REAL" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_INT-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_INT" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_INT">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_INT-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_INT-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_INT-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_INT-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="INT" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_INT.NonNeg-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_INT.NonNeg" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_INT.NonNeg">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_INT.NonNeg-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_INT.NonNeg-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_INT.NonNeg-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_INT.NonNeg-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="INT.NonNeg" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="NPPD_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="must have at least one item">
          <sch:rule abstract="true" id="NPPD_INT.Positive-0">
            <sch:assert test="(@nullFlavor or item) and not(@nullFlavor and item)" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="item" type="UVP_INT.Positive" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UVP_INT.Positive">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="value not null">
          <sch:rule abstract="true" id="UVP_INT.Positive-0">
            <sch:assert test="@nullFlavor or (value and not(value/@nullFlavor))" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="must have probability">
          <sch:rule abstract="true" id="UVP_INT.Positive-1">
            <sch:assert test="@nullFlavor or (not(@nullFlavor) and @probability)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="probability must be valid">
          <sch:rule abstract="true" id="UVP_INT.Positive-2">
            <sch:assert test="not(@probability) or (@probability &#62;= 0 and @probability &#60;= 1)" />
          </sch:rule>
        </sch:pattern>
        <sch:pattern name="No History or Update Mode">
          <sch:rule abstract="true" id="UVP_INT.Positive-3">
            <sch:assert test="count(*[self::value][@validTimeLow or @validTimeHigh or @controlActRoot or @controlActExtension or @updateMode])=0" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ANY">
        <xsd:sequence>
          <xsd:element name="value" type="INT.Positive" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="probability" type="xsd:double" use="optional" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QSET.BoundedPIVL">
    <xsd:annotation>
      <xsd:appinfo>
        <sch:pattern name="QSET.BoundedPIVL 2">
          <sch:rule abstract="true" id="QSET.BoundedPIVL-0">
            <sch:assert test="count(*)=2" />
          </sch:rule>
        </sch:pattern>
      </xsd:appinfo>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:restriction base="QSI_TS">
        <xsd:sequence>
          <xsd:element name="originalText" type="ED.Text" minOccurs="0" maxOccurs="1" />
          <xsd:element name="term" type="QSET_TS" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_BL">
    <xsd:complexContent>
      <xsd:extension base="LIST_BL" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_BL.NonNull">
    <xsd:complexContent>
      <xsd:extension base="LIST_BL.NonNull" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Image">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Image" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Text">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Text" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Doc">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Doc" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Doc.Ref">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Doc.Ref" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Doc.Inline">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Doc.Inline" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Signature">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Signature" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ED.Narrative">
    <xsd:complexContent>
      <xsd:extension base="LIST_ED.Narrative" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ST">
    <xsd:complexContent>
      <xsd:extension base="LIST_ST" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_ST.NT">
    <xsd:complexContent>
      <xsd:extension base="LIST_ST.NT" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_SC">
    <xsd:complexContent>
      <xsd:extension base="LIST_SC" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_SC.NT">
    <xsd:complexContent>
      <xsd:extension base="LIST_SC.NT" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TEL">
    <xsd:complexContent>
      <xsd:extension base="LIST_TEL" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TEL.Email">
    <xsd:complexContent>
      <xsd:extension base="LIST_TEL.Email" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TEL.Person">
    <xsd:complexContent>
      <xsd:extension base="LIST_TEL.Person" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TEL.Phone">
    <xsd:complexContent>
      <xsd:extension base="LIST_TEL.Phone" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TEL.Url">
    <xsd:complexContent>
      <xsd:extension base="LIST_TEL.Url" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_II">
    <xsd:complexContent>
      <xsd:extension base="LIST_II" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_CD">
    <xsd:complexContent>
      <xsd:extension base="LIST_CD" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_CD.CE">
    <xsd:complexContent>
      <xsd:extension base="LIST_CD.CE" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_CD.CE.None">
    <xsd:complexContent>
      <xsd:extension base="LIST_CD.CE.None" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_CD.CV">
    <xsd:complexContent>
      <xsd:extension base="LIST_CD.CV" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_CO">
    <xsd:complexContent>
      <xsd:extension base="LIST_CO" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_CS">
    <xsd:complexContent>
      <xsd:extension base="LIST_CS" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_AD">
    <xsd:complexContent>
      <xsd:extension base="LIST_AD" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_EN">
    <xsd:complexContent>
      <xsd:extension base="LIST_EN" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_EN.TN">
    <xsd:complexContent>
      <xsd:extension base="LIST_EN.TN" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_EN.PN">
    <xsd:complexContent>
      <xsd:extension base="LIST_EN.PN" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_EN.ON">
    <xsd:complexContent>
      <xsd:extension base="LIST_EN.ON" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TS">
    <xsd:complexContent>
      <xsd:extension base="LIST_TS" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TS.Date">
    <xsd:complexContent>
      <xsd:extension base="LIST_TS.Date" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TS.Date.Full">
    <xsd:complexContent>
      <xsd:extension base="LIST_TS.Date.Full" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TS.DateTime">
    <xsd:complexContent>
      <xsd:extension base="LIST_TS.DateTime" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TS.DateTime.Full">
    <xsd:complexContent>
      <xsd:extension base="LIST_TS.DateTime.Full" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_TS.Birth">
    <xsd:complexContent>
      <xsd:extension base="LIST_TS.Birth" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_RTO">
    <xsd:complexContent>
      <xsd:extension base="LIST_RTO" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_MO">
    <xsd:complexContent>
      <xsd:extension base="LIST_MO" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_PQ">
    <xsd:complexContent>
      <xsd:extension base="LIST_PQ" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_PQ.Time">
    <xsd:complexContent>
      <xsd:extension base="LIST_PQ.Time" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_REAL">
    <xsd:complexContent>
      <xsd:extension base="LIST_REAL" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_INT">
    <xsd:complexContent>
      <xsd:extension base="LIST_INT" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_INT.NonNeg">
    <xsd:complexContent>
      <xsd:extension base="LIST_INT.NonNeg" />
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="HIST_INT.Positive">
    <xsd:complexContent>
      <xsd:extension base="LIST_INT.Positive" />
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
