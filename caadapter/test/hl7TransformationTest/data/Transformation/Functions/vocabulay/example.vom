# This .vom file is an example for demonstrations and explanation of usage.
# This line starts with a '#' character and this means a 'remark' which doesn't work.
/* 
   This block is also remark.
   The file extension 'vom' stands for 'VOcabulary Mapping' 
   and this file can be called by 'transferMappedValue' function or 'transferInverseMappedValue' function
   of 'FunctionVocabularyMapping' function group.
   An effective mapping line must be divided with '=>' characters.
   The usage is {Source} => {Target}.
   In case of 'AA=>BB', using 'transferMappedValue' function, when 'AA' is input, 'BB' will be output,
   however, when using 'transferInverseMappedValue' function, vise versa.
*/
# Following remark sentences are an example recommended remarking of a vom file for explaining
# -----------------------------------------------------------------------------------------
# This vom file is mapping between; 
#   Source : HL7 0007 definition table (marital status)  
#   Target : HL7 version 3.0 vocabulary domain 2.16.840.1.113883.11.16899 (ActUncertainty)
#------------------------------------------------------------------------------------------
#
# Following cases are valid vocabulary mapping data
   
WI /* This is an abbreviation of 'Widow' */ => WD /* another remark */
SC                                          => vc 
XXXX /* data sample */                      => VVVV
QQ1   /* data sample */                     => ZZZ1
QQ2 /* test 2 */ => VVV2 ; QQx => VVV3 ; QQ4 => VVV4
QQ5 => VVV5
Rockville => ABC
# At last line, the order of what to do when else cases can be assigned.
# The tag '&ElseCases:' works in case of 'transferMappedValue' function.
# The tag '&InverseElseCases:' works in case of 'transferInverseMappedValue' function.
# And one of following cases have to follow after this tag.
#      keep values         (directly send out the input value)
#      double quotation    (send out "")
#      single quotation    (send out '')
#      space               (send out a space character)
#      zero                (send out '0')
#      null                (send out a zero length string array)
#      value assign = 'VV' (send out 'VV', user can assign another value.)       
#      error message       (send out the error message)  
#      make an error       (throw an exception, This is the default case.)
#
#   No matter whether upper or lower case for each character of this statement.
#   Following lines are a valid else case statements for example.
&ElseCases: error message
&InverseElseCases: value assign = 'InverseXX'