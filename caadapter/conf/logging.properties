############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
#handlers = java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
#.level = SERVER
level = SERVER
############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.pattern = log/caadapter.log
java.util.logging.FileHandler.limit = 1048576
java.util.logging.FileHandler.count = 10,000
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.level = INFO

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = SEVERE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
# Possible values:
#
# ALL (enable logging of all messages)
# FINEST (highly detailed tracing messages)
# FINER (fairly detailed tracing messages; entering method, returning from
#        method, or throwing an exception)
# FINE (tracing information; broadly interesting to developers who do not
#       have a specialized interest in the specific subsystem)
# CONFIG (static configuration messages)
# INFO (informational messages; for end users and system admins)
# WARNING (potential problem messages)
# SEVERE (serious failure messages only)
# OFF (turn off logging)
#

org.hl7.demo.level = INFO
org.hl7.factories.level = INFO
org.hl7.meta.level = INFO
org.hl7.types.level = INFO
org.hl7.xml.level = INFO
org.hl7.xml.builder.level = INFO
org.hl7.xml.parser.level = INFO
gov.nih.nci.hl7.level=INFO
gov.nih.nci.hl7.validation.level=INFO
gov.nih.nci.hl7.vocabulary.level=INFO
gov.nih.nci.hl7.map.level=INFO
